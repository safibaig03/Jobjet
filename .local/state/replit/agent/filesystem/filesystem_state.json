{"file_contents":{"README.md":{"content":"# JobJet\n\nA comprehensive full-stack job board platform built with React, Express.js, and in-memory storage. Features role-based authentication, job posting/browsing, company profiles, and learning resources.\n\n## 🚀 Features\n\n### Core Functionality\n- **User Authentication**: Secure registration/login with role-based access (Job Seeker, Company, Admin)\n- **Job Management**: Companies can post, edit, and manage job listings\n- **Job Applications**: Job seekers can browse and apply to jobs\n- **Company Profiles**: Detailed company pages with job listings and information\n- **Learning Resources**: Curated educational resources for career development\n- **Search & Filtering**: Advanced job search capabilities\n- **Responsive Design**: Mobile-first design that works on all devices\n\n### User Roles\n- **Job Seekers**: Browse jobs, apply to positions, manage applications\n- **Companies**: Post jobs, manage listings, view applications\n- **Admin**: Platform management and oversight\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Tailwind CSS** for styling\n- **Shadcn/ui** components\n- **Wouter** for client-side routing\n- **TanStack Query** for data fetching\n- **React Hook Form** with Zod validation\n- **Framer Motion** for animations\n\n### Backend\n- **Express.js** with TypeScript\n- **Passport.js** for authentication\n- **Session-based authentication** with express-session\n- **In-memory storage** (MemoryStore) for development\n- **Zod** for schema validation\n- **crypto.scrypt** for password hashing\n\n### Development Tools\n- **Vite** for development server and build\n- **TypeScript** for type safety\n- **ESBuild** for production builds\n- **Drizzle ORM** schema definitions (ready for database migration)\n\n## 📋 Prerequisites\n\nBefore running this application locally, ensure you have:\n\n- **Node.js** (version 18 or higher)\n- **npm** (version 8 or higher)\n- **Git** for cloning the repository\n\n## 🚀 Local Setup Instructions\n\n### 1. Clone or Download the Repository\n```bash\ngit clone <repository-url>\ncd jobjet\n```\n\n### 2. Install Dependencies\n```bash\nnpm install\n```\n\n### 3. Environment Setup (Optional)\nCreate a `.env` file in the root directory for custom configuration:\n```env\n# Optional: Custom session secret (defaults to 'jobboard-secret')\nSESSION_SECRET=your-custom-session-secret\n\n# Optional: Custom port (defaults to 5000)\nPORT=5000\n```\n\n### 4. Start Development Server\n```bash\nnpm run dev\n```\n\n**Important**: Use this command instead of `npm start` for local development.\n\nThe application will be available at: **http://localhost:5000**\n\n### 5. Alternative Local Run Command\nIf you encounter any issues with the development server, you can also run:\n```bash\nnode -r tsx/esm server/index.ts\n```\n\n## 📁 Project Structure\n\n```\njobjet/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   │   ├── ui/         # Shadcn/ui components\n│   │   │   ├── layout/     # Layout components (Navbar, Footer)\n│   │   │   ├── jobs/       # Job-related components\n│   │   │   └── companies/  # Company-related components\n│   │   ├── pages/          # Page components\n│   │   │   ├── home-page.tsx\n│   │   │   ├── auth-page.tsx\n│   │   │   ├── job-listings.tsx\n│   │   │   ├── companies.tsx\n│   │   │   ├── resources.tsx\n│   │   │   └── ...\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility functions and configurations\n│   │   ├── store/          # Zustand stores\n│   │   ├── App.tsx         # Main App component\n│   │   └── main.tsx        # React entry point\n│   └── index.html          # HTML template\n├── server/                 # Backend Express application\n│   ├── index.ts            # Server entry point\n│   ├── routes.ts           # API routes\n│   ├── auth.ts             # Authentication setup\n│   ├── storage.ts          # In-memory storage implementation\n│   └── vite.ts             # Vite integration\n├── shared/                 # Shared types and schemas\n│   └── schema.ts           # Database schemas and types\n├── package.json            # Dependencies and scripts\n├── vite.config.ts          # Vite configuration\n├── tailwind.config.ts      # Tailwind CSS configuration\n├── tsconfig.json           # TypeScript configuration\n└── README.md               # This file\n```\n\n## 🔧 Available Scripts\n\n```bash\n# Development\nnpm run dev          # Start development server (RECOMMENDED)\n\n# Building\nnpm run build        # Build for production\nnpm run start        # Start production server\n\n# Type Checking\nnpm run check        # TypeScript type checking\n\n# Database (when using PostgreSQL)\nnpm run db:push      # Push schema changes to database\n```\n\n## 🎨 Design System\n\nThe application uses a consistent purple theme throughout:\n- **Primary Color**: `hsl(238 77% 64%)` (Purple)\n- **Design System**: Shadcn/ui components with Tailwind CSS\n- **Theme**: Professional variant with light appearance\n- **Typography**: Inter font family\n- **Icons**: Lucide React icons\n\n## 🔐 Authentication System\n\n### No External Services Required\nThis application uses **built-in authentication** - no Clerk, Auth0, or other external services needed.\n\n### Features\n- **Session-based authentication** using Passport.js\n- **Password hashing** with crypto.scrypt\n- **Role-based access control**\n- **Protected routes** for authenticated users\n- **Automatic company profile creation** for company users\n\n### Available Endpoints\n```\nPOST /api/register    # User registration\nPOST /api/login       # User login\nPOST /api/logout      # User logout\nGET  /api/user        # Get current user\n```\n\n## 💾 Data Storage\n\nCurrently uses **in-memory storage** for development simplicity:\n- **MemoryStore** for session storage\n- **JavaScript objects** for data persistence\n- **Sample data** pre-loaded for demonstration\n- **No database setup required** for local development\n\n### Sample Data Included\n- **5 Companies**: TechCorp Solutions, Digital Innovations Inc, Global Finance Partners, HealthTech Solutions, EcoGreen Industries\n- **8 Learning Resources**: GeeksforGeeks, LeetCode, Stack Overflow, GitHub, Coursera, edX, Udemy, FreeCodeCamp\n- **Job Categories**: Software Development, Data Science, Marketing, Design, etc.\n\n## 🌐 API Endpoints\n\n### Users & Authentication\n- `POST /api/register` - User registration\n- `POST /api/login` - User login\n- `POST /api/logout` - User logout\n- `GET /api/user` - Get current user\n\n### Jobs\n- `GET /api/jobs` - Get all jobs\n- `POST /api/jobs` - Create new job (company only)\n- `GET /api/jobs/:id` - Get job by ID\n- `PUT /api/jobs/:id` - Update job (company only)\n- `DELETE /api/jobs/:id` - Delete job (company only)\n\n### Companies\n- `GET /api/companies` - Get all companies\n- `GET /api/companies/:id` - Get company by ID\n\n### Applications\n- `GET /api/applications` - Get user's applications\n- `POST /api/applications` - Submit job application\n\n### Categories & Resources\n- `GET /api/categories` - Get job categories\n- `GET /api/resources` - Get learning resources\n\n## 🎯 Key Features Implemented\n\n### ✅ Authentication & Authorization\n- User registration/login with validation\n- Role-based access control (Job Seeker, Company, Admin)\n- Session management\n- Protected routes\n\n### ✅ Job Management\n- Job posting for companies\n- Job browsing for job seekers\n- Job search and filtering\n- Application submission\n\n### ✅ Company Features\n- Company profile creation during registration\n- Company job listings\n- Company information display\n- 5 sample companies included\n\n### ✅ User Experience\n- Responsive design\n- Loading states\n- Error handling\n- Form validation\n- Consistent purple theme\n- Mobile-first design\n\n### ✅ Learning Resources\n- 8 curated learning platforms\n- Categorized resources (Programming Tutorials, Q&A Community, Coding Practice, Learning Platforms)\n- External links to educational content\n\n## 🚀 Running in Production\n\n### Build the Application\n```bash\nnpm run build\n```\n\n### Start Production Server\n```bash\nnpm start\n```\n\n### Environment Variables for Production\n```env\nNODE_ENV=production\nSESSION_SECRET=your-secure-session-secret\nPORT=5000\n```\n\n## 🔄 Migration to Database\n\nThe codebase is ready for database migration:\n\n1. **Schema is defined** in `shared/schema.ts` using Drizzle ORM\n2. **Storage interface** in `server/storage.ts` can be swapped\n3. **Drizzle configuration** ready in `drizzle.config.ts`\n\nTo migrate to PostgreSQL:\n1. Set up PostgreSQL database\n2. Configure `DATABASE_URL` environment variable\n3. Replace `MemStorage` with `DbStorage` in `server/storage.ts`\n4. Run `npm run db:push` to create tables\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Port already in use**\n   ```bash\n   # Kill process on port 5000 (macOS/Linux)\n   lsof -ti:5000 | xargs kill -9\n   \n   # Windows\n   netstat -ano | findstr :5000\n   taskkill /PID <PID> /F\n   ```\n\n2. **Dependencies issues**\n   ```bash\n   # Clear npm cache and reinstall\n   rm -rf node_modules package-lock.json\n   npm install\n   ```\n\n3. **TypeScript errors**\n   ```bash\n   # Run type checking\n   npm run check\n   ```\n\n4. **Server not starting**\n   - Make sure you're using `npm run dev` for development\n   - Check if port 5000 is available\n   - Try the alternative command: `node -r tsx/esm server/index.ts`\n\n## 📱 Testing the Application\n\n### Sample User Accounts\nYou can register new accounts with these roles:\n- **Job Seeker**: Select \"Find a job\" during registration\n- **Company**: Select \"Hire talent\" during registration\n\n### Testing Features\n1. **Registration**: Create accounts for both job seekers and companies\n2. **Job Posting**: Login as a company and post new jobs\n3. **Job Application**: Login as a job seeker and apply to jobs\n4. **Company Browsing**: Visit `/companies` to see all registered companies\n5. **Learning Resources**: Visit `/resources` to explore educational content\n\n## 🎨 Customization\n\n### Changing the Theme\nEdit `theme.json` to customize colors:\n```json\n{\n  \"variant\": \"professional\",\n  \"primary\": \"hsl(238 77% 64%)\",\n  \"appearance\": \"light\",\n  \"radius\": 0.5\n}\n```\n\n### Adding New Pages\n1. Create new page component in `client/src/pages/`\n2. Add route in `client/src/App.tsx`\n3. Update navigation in `client/src/components/layout/navbar.tsx`\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create feature branch: `git checkout -b feature/new-feature`\n3. Commit changes: `git commit -am 'Add new feature'`\n4. Push to branch: `git push origin feature/new-feature`\n5. Submit pull request\n\n## 📄 License\n\nThis project is licensed under the MIT License.\n\n## 🔗 Additional Resources\n\n- [React Documentation](https://react.dev/)\n- [Express.js Guide](https://expressjs.com/)\n- [Tailwind CSS](https://tailwindcss.com/)\n- [Shadcn/ui Components](https://ui.shadcn.com/)\n- [Drizzle ORM](https://orm.drizzle.team/)\n- [Passport.js](http://www.passportjs.org/)\n\n---\n\n**Note**: This application uses in-memory storage for development simplicity. No external database or authentication services required. For production deployment, consider migrating to a persistent database like PostgreSQL.","size_bytes":11377},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1008},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nexport async function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"jobboard-secret\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 24 * 60 * 60 * 1000, // 1 day\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user || !(await comparePasswords(password, user.password))) {\n          return done(null, false);\n        } else {\n          return done(null, user);\n        }\n      } catch (error) {\n        return done(error);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Check if email already exists\n      const existingEmail = await storage.getUserByEmail(req.body.email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...req.body,\n        password: await hashPassword(req.body.password),\n      });\n\n      // If user is a company, create a company profile\n      if (req.body.role === 'company') {\n        await storage.createCompany({\n          userId: user.id,\n          name: req.body.name,\n          website: req.body.website || '',\n          logo: req.body.logo || '',\n          description: req.body.description || '',\n          location: req.body.location || '',\n        });\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3643},"server/index.local.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // Modified to use only the port without specifying host for local development\n  const port = process.env.PORT || 5000;\n  server.listen(port, () => {\n    log(`serving on port ${port}`);\n  });\n})();","size_bytes":1919},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { z } from \"zod\";\nimport { \n  insertJobSchema, \n  insertCompanySchema, \n  insertApplicationSchema,\n  jobTypeEnum, \n  userRoleEnum\n} from \"@shared/schema\";\n\n// Middleware to check if user is authenticated\nconst isAuthenticated = (req: Request, res: Response, next: Function) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Middleware to check if user has a specific role\nconst hasRole = (roles: string[]) => (req: Request, res: Response, next: Function) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  if (roles.includes(req.user!.role)) {\n    return next();\n  }\n  \n  res.status(403).json({ message: \"Forbidden\" });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up authentication routes\n  setupAuth(app);\n\n  // Jobs API\n  app.get(\"/api/jobs\", async (req, res) => {\n    try {\n      const { search, location, type, category } = req.query;\n      const jobs = await storage.getJobs({\n        search: search as string,\n        location: location as string,\n        type: type as string,\n        category: category as string\n      });\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  app.get(\"/api/jobs/:id\", async (req, res) => {\n    try {\n      const job = await storage.getJob(parseInt(req.params.id));\n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      res.json(job);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch job details\" });\n    }\n  });\n\n  app.post(\"/api/jobs\", isAuthenticated, hasRole(['company', 'admin']), async (req, res) => {\n    try {\n      const jobData = insertJobSchema.parse({\n        ...req.body,\n        postedBy: req.user!.id,\n      });\n      const job = await storage.createJob(jobData);\n      res.status(201).json(job);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid job data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create job\" });\n      }\n    }\n  });\n\n  app.put(\"/api/jobs/:id\", isAuthenticated, hasRole(['company', 'admin']), async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      const existingJob = await storage.getJob(jobId);\n      \n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check if user owns the job or is an admin\n      if (existingJob.postedBy !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const updatedJob = await storage.updateJob(jobId, req.body);\n      res.json(updatedJob);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update job\" });\n    }\n  });\n\n  app.delete(\"/api/jobs/:id\", isAuthenticated, hasRole(['company', 'admin']), async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      const existingJob = await storage.getJob(jobId);\n      \n      if (!existingJob) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      // Check if user owns the job or is an admin\n      if (existingJob.postedBy !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      await storage.deleteJob(jobId);\n      res.sendStatus(204);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete job\" });\n    }\n  });\n\n  // Applications API\n  app.post(\"/api/jobs/:id/apply\", isAuthenticated, hasRole(['job_seeker']), async (req, res) => {\n    try {\n      const jobId = parseInt(req.params.id);\n      const job = await storage.getJob(jobId);\n      \n      if (!job) {\n        return res.status(404).json({ message: \"Job not found\" });\n      }\n      \n      const applicationData = insertApplicationSchema.parse({\n        ...req.body,\n        jobId,\n        userId: req.user!.id,\n      });\n      \n      const application = await storage.createApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid application data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to submit application\" });\n      }\n    }\n  });\n\n  app.get(\"/api/applications\", isAuthenticated, async (req, res) => {\n    try {\n      let applications;\n      \n      if (req.user!.role === 'job_seeker') {\n        // Job seekers can only see their own applications\n        applications = await storage.getApplicationsByUser(req.user!.id);\n      } else if (req.user!.role === 'company') {\n        // Companies can see applications for their jobs\n        applications = await storage.getApplicationsByCompany(req.user!.id);\n      } else if (req.user!.role === 'admin') {\n        // Admins can see all applications\n        applications = await storage.getAllApplications();\n      }\n      \n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch applications\" });\n    }\n  });\n\n  // Categories API\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Resources API\n  app.get(\"/api/resources\", async (req, res) => {\n    try {\n      const resources = await storage.getResources();\n      res.json(resources);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch resources\" });\n    }\n  });\n\n  // Companies API\n  app.get(\"/api/companies\", async (req, res) => {\n    try {\n      const companies = await storage.getCompanies();\n      res.json(companies);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch companies\" });\n    }\n  });\n\n  app.get(\"/api/companies/:id\", async (req, res) => {\n    try {\n      const company = await storage.getCompany(parseInt(req.params.id));\n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      res.json(company);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company details\" });\n    }\n  });\n\n  app.put(\"/api/companies/:id\", isAuthenticated, hasRole(['company', 'admin']), async (req, res) => {\n    try {\n      const companyId = parseInt(req.params.id);\n      const company = await storage.getCompany(companyId);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n      \n      // Check if user owns the company or is an admin\n      if (company.userId !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Forbidden\" });\n      }\n      \n      const updatedCompany = await storage.updateCompany(companyId, req.body);\n      res.json(updatedCompany);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update company\" });\n    }\n  });\n\n  // Company Dashboard API - Get jobs posted by company\n  app.get(\"/api/dashboard/jobs\", isAuthenticated, hasRole(['company']), async (req, res) => {\n    try {\n      const jobs = await storage.getJobsByCompany(req.user!.id);\n      res.json(jobs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch jobs\" });\n    }\n  });\n\n  // Get list of enums for frontend forms\n  app.get(\"/api/enums\", (req, res) => {\n    try {\n      const enums = {\n        jobTypes: jobTypeEnum.enumValues,\n        userRoles: userRoleEnum.enumValues\n      };\n      res.json(enums);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch enums\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":8136},"server/storage.ts":{"content":"import { users, User, InsertUser, companies, Company, InsertCompany, jobs, Job, InsertJob, applications, Application, InsertApplication, categories, Category, resources, Resource, InsertResource } from \"@shared/schema\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\n// modify the interface with any CRUD methods\n// you might need\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Company management\n  createCompany(company: InsertCompany): Promise<Company>;\n  getCompany(id: number): Promise<Company | undefined>;\n  getCompanies(): Promise<Company[]>;\n  getCompanyByUserId(userId: number): Promise<Company | undefined>;\n  updateCompany(id: number, company: Partial<Company>): Promise<Company>;\n  \n  // Job management\n  getJobs(filters?: { search?: string, location?: string, type?: string, category?: string }): Promise<Job[]>;\n  getJob(id: number): Promise<Job | undefined>;\n  createJob(job: InsertJob): Promise<Job>;\n  updateJob(id: number, job: Partial<Job>): Promise<Job>;\n  deleteJob(id: number): Promise<void>;\n  getJobsByCompany(userId: number): Promise<Job[]>;\n  \n  // Application management\n  createApplication(application: InsertApplication): Promise<Application>;\n  getApplicationsByUser(userId: number): Promise<Application[]>;\n  getApplicationsByCompany(companyId: number): Promise<Application[]>;\n  getAllApplications(): Promise<Application[]>;\n  \n  // Category management\n  getCategories(): Promise<Category[]>;\n  \n  // Resource management\n  getResources(): Promise<Resource[]>;\n  \n  // Session store\n  sessionStore: session.SessionStore;\n}\n\nexport class MemStorage implements IStorage {\n  private usersData: Map<number, User>;\n  private companiesData: Map<number, Company>;\n  private jobsData: Map<number, Job>;\n  private applicationsData: Map<number, Application>;\n  private categoriesData: Map<number, Category>;\n  private resourcesData: Map<number, Resource>;\n  \n  public sessionStore: session.SessionStore;\n  \n  private userIdCounter: number;\n  private companyIdCounter: number;\n  private jobIdCounter: number;\n  private applicationIdCounter: number;\n  private categoryIdCounter: number;\n  private resourceIdCounter: number;\n\n  constructor() {\n    this.usersData = new Map();\n    this.companiesData = new Map();\n    this.jobsData = new Map();\n    this.applicationsData = new Map();\n    this.categoriesData = new Map();\n    this.resourcesData = new Map();\n    \n    this.userIdCounter = 1;\n    this.companyIdCounter = 1;\n    this.jobIdCounter = 1;\n    this.applicationIdCounter = 1;\n    this.categoryIdCounter = 1;\n    this.resourceIdCounter = 1;\n    \n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000 // prune expired entries every 24h\n    });\n    \n    // Seed some initial categories, companies and resources\n    this.seedCategories();\n    this.seedCompanies();\n    this.seedResources();\n  }\n\n  private seedCategories() {\n    const categoryData = [\n      { name: \"Software Development\", icon: \"CodeIcon\" },\n      { name: \"Design\", icon: \"PaletteIcon\" },\n      { name: \"Marketing\", icon: \"TrendingUpIcon\" },\n      { name: \"Management\", icon: \"UsersIcon\" },\n      { name: \"Data Science\", icon: \"BarChartIcon\" },\n      { name: \"Customer Service\", icon: \"HeadphonesIcon\" },\n      { name: \"Finance\", icon: \"DollarSignIcon\" },\n      { name: \"Healthcare\", icon: \"HeartIcon\" }\n    ];\n    \n    categoryData.forEach(category => {\n      const id = this.categoryIdCounter++;\n      this.categoriesData.set(id, {\n        id,\n        ...category\n      });\n    });\n  }\n\n  private seedCompanies() {\n    const companyData = [\n      {\n        name: \"TechCorp Solutions\",\n        userId: 1, // We'll create corresponding users later\n        location: \"San Francisco, CA\",\n        website: \"https://techcorp.com\",\n        description: \"Leading technology solutions provider specializing in cloud computing and AI.\",\n        logo: null\n      },\n      {\n        name: \"Digital Innovations Inc\",\n        userId: 2,\n        location: \"New York, NY\", \n        website: \"https://digitalinnovations.com\",\n        description: \"Innovative digital transformation company helping businesses modernize their operations.\",\n        logo: null\n      },\n      {\n        name: \"Global Finance Partners\",\n        userId: 3,\n        location: \"London, UK\",\n        website: \"https://globalfinance.com\",\n        description: \"Premier financial services firm providing investment and advisory solutions worldwide.\",\n        logo: null\n      },\n      {\n        name: \"HealthTech Solutions\",\n        userId: 4,\n        location: \"Boston, MA\",\n        website: \"https://healthtech.com\", \n        description: \"Revolutionary healthcare technology company developing cutting-edge medical software.\",\n        logo: null\n      },\n      {\n        name: \"EcoGreen Industries\",\n        userId: 5,\n        location: \"Seattle, WA\",\n        website: \"https://ecogreen.com\",\n        description: \"Sustainable technology company focused on renewable energy and environmental solutions.\",\n        logo: null\n      }\n    ];\n\n    companyData.forEach(company => {\n      const id = this.companyIdCounter++;\n      this.companiesData.set(id, {\n        id,\n        ...company\n      });\n    });\n  }\n\n  private seedResources() {\n    const resourceData = [\n      {\n        name: \"GeeksforGeeks\",\n        description: \"A comprehensive platform for computer science education with programming tutorials, algorithms, and interview preparation.\",\n        url: \"https://www.geeksforgeeks.org\",\n        category: \"Programming Tutorials\",\n        icon: \"BookOpenIcon\",\n        tags: [\"programming\", \"algorithms\", \"data-structures\", \"interviews\"]\n      },\n      {\n        name: \"Stack Overflow\",\n        description: \"The largest online community for programmers to learn, share knowledge, and advance careers.\",\n        url: \"https://stackoverflow.com\",\n        category: \"Q&A Community\",\n        icon: \"MessageSquareIcon\",\n        tags: [\"programming\", \"community\", \"questions\", \"debugging\"]\n      },\n      {\n        name: \"LeetCode\",\n        description: \"Platform for coding interview preparation with thousands of programming challenges and solutions.\",\n        url: \"https://leetcode.com\",\n        category: \"Coding Practice\",\n        icon: \"CodeIcon\",\n        tags: [\"coding-interviews\", \"algorithms\", \"practice\", \"competitive-programming\"]\n      },\n      {\n        name: \"GitHub\",\n        description: \"World's largest platform for version control and collaboration, hosting millions of open source projects.\",\n        url: \"https://github.com\",\n        category: \"Version Control\",\n        icon: \"GitBranchIcon\",\n        tags: [\"git\", \"version-control\", \"open-source\", \"collaboration\"]\n      },\n      {\n        name: \"MDN Web Docs\",\n        description: \"Comprehensive documentation for web technologies including HTML, CSS, JavaScript, and web APIs.\",\n        url: \"https://developer.mozilla.org\",\n        category: \"Web Development\",\n        icon: \"GlobeIcon\",\n        tags: [\"web-development\", \"javascript\", \"html\", \"css\", \"documentation\"]\n      },\n      {\n        name: \"HackerRank\",\n        description: \"Coding challenges and competitions to improve programming skills and prepare for technical interviews.\",\n        url: \"https://www.hackerrank.com\",\n        category: \"Coding Practice\",\n        icon: \"TrophyIcon\",\n        tags: [\"coding-challenges\", \"programming\", \"competitions\", \"skill-development\"]\n      },\n      {\n        name: \"Coursera\",\n        description: \"Online learning platform offering courses from top universities and companies in technology and programming.\",\n        url: \"https://www.coursera.org\",\n        category: \"Online Learning\",\n        icon: \"GraduationCapIcon\",\n        tags: [\"online-courses\", \"education\", \"certificates\", \"university-courses\"]\n      },\n      {\n        name: \"freeCodeCamp\",\n        description: \"Free online coding bootcamp with interactive lessons, projects, and certifications in web development.\",\n        url: \"https://www.freecodecamp.org\",\n        category: \"Free Education\",\n        icon: \"AcademicCapIcon\",\n        tags: [\"free\", \"web-development\", \"certificates\", \"bootcamp\", \"projects\"]\n      }\n    ];\n\n    resourceData.forEach(resource => {\n      const id = this.resourceIdCounter++;\n      this.resourcesData.set(id, {\n        id,\n        ...resource\n      });\n    });\n  }\n\n  // User management\n  async getUser(id: number): Promise<User | undefined> {\n    return this.usersData.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.usersData.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.usersData.values()).find(\n      (user) => user.email === email,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userIdCounter++;\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id,\n      createdAt: now\n    };\n    this.usersData.set(id, user);\n    return user;\n  }\n\n  // Company management\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = this.companyIdCounter++;\n    const company: Company = { ...insertCompany, id };\n    this.companiesData.set(id, company);\n    return company;\n  }\n\n  async getCompany(id: number): Promise<Company | undefined> {\n    return this.companiesData.get(id);\n  }\n\n  async getCompanies(): Promise<Company[]> {\n    return Array.from(this.companiesData.values());\n  }\n\n  async getCompanyByUserId(userId: number): Promise<Company | undefined> {\n    return Array.from(this.companiesData.values()).find(\n      (company) => company.userId === userId,\n    );\n  }\n\n  async updateCompany(id: number, companyUpdate: Partial<Company>): Promise<Company> {\n    const company = this.companiesData.get(id);\n    if (!company) {\n      throw new Error(`Company with id ${id} not found`);\n    }\n    \n    const updatedCompany = { ...company, ...companyUpdate };\n    this.companiesData.set(id, updatedCompany);\n    return updatedCompany;\n  }\n\n  // Job management\n  async getJobs(filters?: { search?: string, location?: string, type?: string, category?: string }): Promise<Job[]> {\n    let jobs = Array.from(this.jobsData.values());\n    \n    if (filters) {\n      // Filter by search term (title, description)\n      if (filters.search) {\n        const searchTerm = filters.search.toLowerCase();\n        jobs = jobs.filter(job => \n          job.title.toLowerCase().includes(searchTerm) ||\n          job.description.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      // Filter by location\n      if (filters.location) {\n        const locationTerm = filters.location.toLowerCase();\n        jobs = jobs.filter(job => \n          job.location.toLowerCase().includes(locationTerm)\n        );\n      }\n      \n      // Filter by job type\n      if (filters.type) {\n        jobs = jobs.filter(job => job.jobType === filters.type);\n      }\n      \n      // We'll implement category filtering later when we have category-job relationships\n    }\n    \n    // Sort by newest first\n    return jobs.sort((a, b) => \n      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n  }\n\n  async getJob(id: number): Promise<Job | undefined> {\n    return this.jobsData.get(id);\n  }\n\n  async createJob(insertJob: InsertJob): Promise<Job> {\n    const id = this.jobIdCounter++;\n    const now = new Date();\n    const job: Job = { \n      ...insertJob, \n      id, \n      createdAt: now,\n      isActive: true\n    };\n    this.jobsData.set(id, job);\n    return job;\n  }\n\n  async updateJob(id: number, jobUpdate: Partial<Job>): Promise<Job> {\n    const job = this.jobsData.get(id);\n    if (!job) {\n      throw new Error(`Job with id ${id} not found`);\n    }\n    \n    const updatedJob = { ...job, ...jobUpdate };\n    this.jobsData.set(id, updatedJob);\n    return updatedJob;\n  }\n\n  async deleteJob(id: number): Promise<void> {\n    if (!this.jobsData.has(id)) {\n      throw new Error(`Job with id ${id} not found`);\n    }\n    \n    this.jobsData.delete(id);\n  }\n\n  async getJobsByCompany(userId: number): Promise<Job[]> {\n    const company = await this.getCompanyByUserId(userId);\n    if (!company) {\n      return [];\n    }\n    \n    return Array.from(this.jobsData.values())\n      .filter(job => job.companyId === company.id)\n      .sort((a, b) => \n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n      );\n  }\n\n  // Application management\n  async createApplication(insertApplication: InsertApplication): Promise<Application> {\n    const id = this.applicationIdCounter++;\n    const now = new Date();\n    const application: Application = { \n      ...insertApplication, \n      id,\n      status: \"pending\",\n      submittedAt: now\n    };\n    this.applicationsData.set(id, application);\n    return application;\n  }\n\n  async getApplicationsByUser(userId: number): Promise<Application[]> {\n    return Array.from(this.applicationsData.values())\n      .filter(application => application.userId === userId)\n      .sort((a, b) => \n        new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()\n      );\n  }\n\n  async getApplicationsByCompany(userId: number): Promise<Application[]> {\n    const company = await this.getCompanyByUserId(userId);\n    if (!company) {\n      return [];\n    }\n    \n    // Get all company's jobs\n    const companyJobs = Array.from(this.jobsData.values())\n      .filter(job => job.companyId === company.id)\n      .map(job => job.id);\n    \n    // Get applications for those jobs\n    return Array.from(this.applicationsData.values())\n      .filter(application => companyJobs.includes(application.jobId))\n      .sort((a, b) => \n        new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()\n      );\n  }\n\n  async getAllApplications(): Promise<Application[]> {\n    return Array.from(this.applicationsData.values())\n      .sort((a, b) => \n        new Date(b.submittedAt).getTime() - new Date(a.submittedAt).getTime()\n      );\n  }\n\n  // Category management\n  async getCategories(): Promise<Category[]> {\n    return Array.from(this.categoriesData.values());\n  }\n\n  // Resource management\n  async getResources(): Promise<Resource[]> {\n    return Array.from(this.resourcesData.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14633},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User-related schemas\nexport const userRoleEnum = pgEnum('user_role', ['job_seeker', 'company', 'admin']);\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: userRoleEnum(\"role\").notNull().default('job_seeker'),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  role: true,\n  name: true,\n});\n\n// Company profiles\nexport const companies = pgTable(\"companies\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  website: text(\"website\"),\n  logo: text(\"logo\"),\n  description: text(\"description\"),\n  location: text(\"location\"),\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).pick({\n  userId: true,\n  name: true,\n  website: true,\n  logo: true,\n  description: true,\n  location: true,\n});\n\n// Job listings\nexport const jobTypeEnum = pgEnum('job_type', ['full_time', 'part_time', 'contract', 'remote', 'internship']);\n\nexport const jobs = pgTable(\"jobs\", {\n  id: serial(\"id\").primaryKey(),\n  companyId: integer(\"company_id\").notNull().references(() => companies.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  requirements: text(\"requirements\").notNull(),\n  location: text(\"location\").notNull(),\n  salary: text(\"salary\"),\n  jobType: jobTypeEnum(\"job_type\").notNull(),\n  experience: text(\"experience\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  postedBy: integer(\"posted_by\").notNull().references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).pick({\n  companyId: true,\n  title: true,\n  description: true,\n  requirements: true,\n  location: true,\n  salary: true,\n  jobType: true,\n  experience: true,\n  postedBy: true,\n});\n\n// Job applications\nexport const applications = pgTable(\"applications\", {\n  id: serial(\"id\").primaryKey(),\n  jobId: integer(\"job_id\").notNull().references(() => jobs.id),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  resume: text(\"resume\"),\n  coverLetter: text(\"cover_letter\"),\n  status: text(\"status\").default(\"pending\"),\n  submittedAt: timestamp(\"submitted_at\").defaultNow(),\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).pick({\n  jobId: true,\n  userId: true,\n  resume: true,\n  coverLetter: true,\n});\n\n// Job categories\nexport const categories = pgTable(\"categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull().unique(),\n  icon: text(\"icon\"),\n});\n\nexport const jobCategories = pgTable(\"job_categories\", {\n  jobId: integer(\"job_id\").notNull().references(() => jobs.id),\n  categoryId: integer(\"category_id\").notNull().references(() => categories.id),\n});\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\n\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\n\nexport type Application = typeof applications.$inferSelect;\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\n\nexport type Category = typeof categories.$inferSelect;\n\n// Learning resources\nexport const resources = pgTable(\"resources\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  url: text(\"url\").notNull(),\n  category: text(\"category\").notNull(),\n  icon: text(\"icon\"),\n  tags: text(\"tags\").array(),\n});\n\nexport const insertResourceSchema = createInsertSchema(resources).pick({\n  name: true,\n  description: true,\n  url: true,\n  category: true,\n  icon: true,\n  tags: true,\n});\n\nexport type Resource = typeof resources.$inferSelect;\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\n","size_bytes":4312},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport HomePage from \"@/pages/home-page\";\nimport AuthPage from \"@/pages/auth-page\";\nimport JobDetails from \"@/pages/job-details\";\nimport CompanyDashboard from \"@/pages/company-dashboard\";\nimport PostJob from \"@/pages/post-job\";\nimport JobListings from \"@/pages/job-listings\";\nimport Applications from \"@/pages/applications\";\nimport Resources from \"@/pages/resources\";\nimport Companies from \"@/pages/companies\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ThemeProvider } from \"@/hooks/use-theme\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/jobs\" component={JobListings} />\n      <Route path=\"/job/:id\" component={JobDetails} />\n      <Route path=\"/companies\" component={Companies} />\n      <Route path=\"/resources\" component={Resources} />\n      <ProtectedRoute path=\"/dashboard\" component={CompanyDashboard} roles={[\"company\"]} />\n      <ProtectedRoute path=\"/post-job\" component={PostJob} roles={[\"company\"]} />\n      <ProtectedRoute path=\"/applications\" component={Applications} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider defaultTheme=\"light\" storageKey=\"jobboard-theme\">\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <Router />\n          <Toaster />\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1789},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n  isCompany: boolean;\n  isJobSeeker: boolean;\n  isAdmin: boolean;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: `Welcome to JobBoard, ${user.name}!`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Could not create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Helper flags for user role checks\n  const isCompany = user?.role === 'company';\n  const isJobSeeker = user?.role === 'job_seeker';\n  const isAdmin = user?.role === 'admin';\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n        isCompany,\n        isJobSeeker,\n        isAdmin,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3545},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\" | \"system\";\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  isDarkMode: boolean;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n  isDarkMode: false,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n  \n  const [isDarkMode, setIsDarkMode] = useState<boolean>(false);\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      setIsDarkMode(systemTheme === \"dark\");\n      return;\n    }\n\n    root.classList.add(theme);\n    setIsDarkMode(theme === \"dark\");\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n    isDarkMode,\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1813},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\ninterface ProtectedRouteProps {\n  path: string;\n  component: React.ComponentType;\n  roles?: string[];\n}\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n  roles\n}: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // If roles are specified, check if user has required role\n  if (roles && !roles.includes(user.role)) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":982},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/applications.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Application, Job } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Clock, CheckCircle, XCircle, Eye, FileText } from \"lucide-react\";\n\nexport default function Applications() {\n  const { user, isJobSeeker } = useAuth();\n\n  // Fetch user's applications\n  const { data: applications, isLoading } = useQuery<Application[]>({\n    queryKey: [\"/api/applications\"],\n  });\n\n  // Helper functions\n  const getStatusBadge = (status: string) => {\n    const statusColors: Record<string, string> = {\n      pending: \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\",\n      approved: \"bg-green-100 text-green-800 hover:bg-green-200\",\n      rejected: \"bg-red-100 text-red-800 hover:bg-red-200\",\n    };\n    \n    const statusIcons: Record<string, JSX.Element> = {\n      pending: <Clock className=\"w-3 h-3 mr-1\" />,\n      approved: <CheckCircle className=\"w-3 h-3 mr-1\" />,\n      rejected: <XCircle className=\"w-3 h-3 mr-1\" />,\n    };\n    \n    return (\n      <Badge className={statusColors[status] || \"bg-gray-100 text-gray-800\"}>\n        <div className=\"flex items-center\">\n          {statusIcons[status]}\n          <span>{status.charAt(0).toUpperCase() + status.slice(1)}</span>\n        </div>\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow py-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">My Applications</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            {isJobSeeker \n              ? \"Track the status of your job applications\" \n              : \"View applications for your job postings\"}\n          </p>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Application History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                  <p className=\"mt-2 text-muted-foreground\">Loading your applications...</p>\n                </div>\n              ) : applications && applications.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"px-4 py-3 text-left font-medium\">Job</th>\n                        <th className=\"px-4 py-3 text-left font-medium\">Applied Date</th>\n                        <th className=\"px-4 py-3 text-left font-medium\">Status</th>\n                        <th className=\"px-4 py-3 text-right font-medium\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {applications.map(application => (\n                        <tr key={application.id} className=\"border-b hover:bg-muted/50\">\n                          <td className=\"px-4 py-4\">\n                            {/* In a real app, you'd fetch the job title */}\n                            <div className=\"font-medium\">Job ID: {application.jobId}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Application #{application.id}\n                            </div>\n                          </td>\n                          <td className=\"px-4 py-4\">\n                            {formatDistanceToNow(new Date(application.submittedAt), { addSuffix: true })}\n                          </td>\n                          <td className=\"px-4 py-4\">\n                            {getStatusBadge(application.status)}\n                          </td>\n                          <td className=\"px-4 py-4 text-right\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"flex items-center gap-1\"\n                              onClick={() => window.open(`/job/${application.jobId}`, '_blank')}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                              <span className=\"hidden sm:inline\">View Job</span>\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No applications yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {isJobSeeker \n                      ? \"You haven't applied to any jobs yet. Start your job search and apply today!\" \n                      : \"You haven't received any applications yet.\"}\n                  </p>\n                  {isJobSeeker && (\n                    <Button onClick={() => window.location.href = \"/jobs\"}>\n                      Browse Jobs\n                    </Button>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5770},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { Redirect } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, InsertUser } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\n\n// Enhanced login schema with custom validation\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\n// Enhanced registration schema with additional fields and validation\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  email: z.string().email(\"Please enter a valid email address\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  role: z.enum([\"job_seeker\", \"company\"], {\n    required_error: \"Please select a role\",\n  }),\n  // Additional fields for company role\n  website: z.string().optional(),\n  location: z.string().optional(),\n  description: z.string().optional(),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState<string>(\"login\");\n\n  // Fetch user roles for the role select dropdown\n  const { data: enums } = useQuery<{ userRoles: string[] }>({\n    queryKey: [\"/api/enums\"],\n  });\n\n  // Login form\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Registration form\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      name: \"\",\n      role: \"job_seeker\",\n      website: \"\",\n      location: \"\",\n      description: \"\",\n    },\n  });\n\n  // Watch role field to conditionally render company fields\n  const selectedRole = registerForm.watch(\"role\");\n\n  const onLoginSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegisterSubmit = (data: RegisterFormData) => {\n    // Remove confirmPassword as it's not part of the API schema\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData as InsertUser);\n  };\n\n  // If user is already logged in, redirect to home page\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl w-full flex flex-col md:flex-row rounded-xl overflow-hidden shadow-xl\">\n          {/* Left side - Auth forms */}\n          <div className=\"w-full md:w-1/2 bg-background p-8\">\n            <div className=\"max-w-md mx-auto\">\n              <h2 className=\"text-3xl font-extrabold text-center mb-6\">\n                {activeTab === \"login\" ? \"Sign in to your account\" : \"Create an account\"}\n              </h2>\n              \n              <Tabs \n                defaultValue=\"login\" \n                value={activeTab} \n                onValueChange={setActiveTab}\n                className=\"w-full\"\n              >\n                <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n                  <TabsTrigger value=\"login\">Login</TabsTrigger>\n                  <TabsTrigger value=\"register\">Register</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"login\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Login</CardTitle>\n                      <CardDescription>\n                        Enter your credentials to access your account\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Form {...loginForm}>\n                        <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={loginForm.control}\n                            name=\"username\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Username</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Enter your username\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={loginForm.control}\n                            name=\"password\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Password</FormLabel>\n                                <FormControl>\n                                  <Input type=\"password\" placeholder=\"Enter your password\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <Button \n                            type=\"submit\" \n                            className=\"w-full\" \n                            disabled={loginMutation.isPending}\n                          >\n                            {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n                          </Button>\n                        </form>\n                      </Form>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n                \n                <TabsContent value=\"register\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Register</CardTitle>\n                      <CardDescription>\n                        Create an account to start using JobBoard\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Form {...registerForm}>\n                        <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={registerForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Full Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Enter your full name\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={registerForm.control}\n                            name=\"email\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Email</FormLabel>\n                                <FormControl>\n                                  <Input type=\"email\" placeholder=\"Enter your email address\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <FormField\n                            control={registerForm.control}\n                            name=\"username\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Username</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Choose a username\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <FormField\n                              control={registerForm.control}\n                              name=\"password\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Password</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"password\" placeholder=\"Choose a password\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            \n                            <FormField\n                              control={registerForm.control}\n                              name=\"confirmPassword\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Confirm Password</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"password\" placeholder=\"Confirm your password\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                          \n                          <FormField\n                            control={registerForm.control}\n                            name=\"role\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>I want to</FormLabel>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  defaultValue={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select your role\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"job_seeker\">Find a job</SelectItem>\n                                    <SelectItem value=\"company\">Hire talent</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormDescription>\n                                  This will determine your account type\n                                </FormDescription>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          \n                          {/* Show additional fields for company accounts */}\n                          {selectedRole === \"company\" && (\n                            <>\n                              <FormField\n                                control={registerForm.control}\n                                name=\"website\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Company Website</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"https://yourcompany.com\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              \n                              <FormField\n                                control={registerForm.control}\n                                name=\"location\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Company Location</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"City, Country\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              \n                              <FormField\n                                control={registerForm.control}\n                                name=\"description\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Company Description</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"Brief description of your company\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </>\n                          )}\n                          \n                          <Button \n                            type=\"submit\" \n                            className=\"w-full\" \n                            disabled={registerMutation.isPending}\n                          >\n                            {registerMutation.isPending ? \"Creating account...\" : \"Create account\"}\n                          </Button>\n                        </form>\n                      </Form>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n            </div>\n          </div>\n          \n          {/* Right side - Hero/Branding section */}\n          <div className=\"w-full md:w-1/2 bg-primary p-8 flex items-center justify-center\">\n            <div className=\"max-w-md text-white\">\n              <h1 className=\"text-4xl font-bold mb-4\">Welcome to JobJet</h1>\n              <p className=\"text-lg mb-6\">\n                The easiest way to find your dream job or hire top talent. Join thousands of companies and job seekers who trust JobJet.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <svg className=\"h-6 w-6 mr-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <p>Access to thousands of job listings</p>\n                </div>\n                <div className=\"flex items-center\">\n                  <svg className=\"h-6 w-6 mr-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <p>Advanced search and filtering options</p>\n                </div>\n                <div className=\"flex items-center\">\n                  <svg className=\"h-6 w-6 mr-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <p>Easy application process</p>\n                </div>\n                <div className=\"flex items-center\">\n                  <svg className=\"h-6 w-6 mr-3 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                  </svg>\n                  <p>Smart job recommendations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17524},"client/src/pages/company-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Job, Application } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Link, useLocation } from \"wouter\";\nimport { Plus, Edit, Trash2, Eye, FileText, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CompanyDashboard() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [jobToDelete, setJobToDelete] = useState<number | null>(null);\n  const [activeTab, setActiveTab] = useState(\"posted-jobs\");\n\n  // Fetch jobs posted by company\n  const { data: jobs, isLoading: jobsLoading } = useQuery<Job[]>({\n    queryKey: [\"/api/dashboard/jobs\"],\n  });\n\n  // Fetch applications for company's jobs\n  const { data: applications, isLoading: applicationsLoading } = useQuery<Application[]>({\n    queryKey: [\"/api/applications\"],\n  });\n\n  // Helper functions\n  const getJobTypeLabel = (type: string): string => {\n    const labels: Record<string, string> = {\n      full_time: \"Full-time\",\n      part_time: \"Part-time\",\n      contract: \"Contract\",\n      remote: \"Remote\",\n      internship: \"Internship\",\n    };\n    return labels[type] || type;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusColors: Record<string, string> = {\n      pending: \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\",\n      approved: \"bg-green-100 text-green-800 hover:bg-green-200\",\n      rejected: \"bg-red-100 text-red-800 hover:bg-red-200\",\n    };\n    \n    const statusIcons: Record<string, JSX.Element> = {\n      pending: <Clock className=\"w-3 h-3 mr-1\" />,\n      approved: <CheckCircle className=\"w-3 h-3 mr-1\" />,\n      rejected: <XCircle className=\"w-3 h-3 mr-1\" />,\n    };\n    \n    return (\n      <Badge className={statusColors[status] || \"bg-gray-100 text-gray-800\"}>\n        <div className=\"flex items-center\">\n          {statusIcons[status]}\n          <span>{status.charAt(0).toUpperCase() + status.slice(1)}</span>\n        </div>\n      </Badge>\n    );\n  };\n\n  // Handle job deletion\n  const handleDeleteJob = async () => {\n    if (!jobToDelete) return;\n    \n    try {\n      await apiRequest(\"DELETE\", `/api/jobs/${jobToDelete}`);\n      \n      // Invalidate jobs cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/jobs\"] });\n      \n      toast({\n        title: \"Job deleted\",\n        description: \"The job has been successfully deleted.\",\n      });\n      \n      setJobToDelete(null);\n    } catch (error) {\n      toast({\n        title: \"Failed to delete job\",\n        description: \"An error occurred while deleting the job.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle application status update\n  const updateApplicationStatus = async (applicationId: number, status: string) => {\n    try {\n      await apiRequest(\"PUT\", `/api/applications/${applicationId}`, { status });\n      \n      // Invalidate applications cache to refresh the list\n      queryClient.invalidateQueries({ queryKey: [\"/api/applications\"] });\n      \n      toast({\n        title: \"Status updated\",\n        description: `Application status has been updated to ${status}.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to update status\",\n        description: \"An error occurred while updating the application status.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow py-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Company Dashboard</h1>\n              <p className=\"text-muted-foreground mt-1\">Manage your jobs and review applications</p>\n            </div>\n            <div className=\"mt-4 md:mt-0\">\n              <Link href=\"/post-job\">\n                <Button className=\"flex items-center\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Post New Job\n                </Button>\n              </Link>\n            </div>\n          </div>\n          \n          <Tabs \n            defaultValue=\"posted-jobs\" \n            value={activeTab}\n            onValueChange={setActiveTab}\n            className=\"space-y-6\"\n          >\n            <TabsList className=\"mb-4\">\n              <TabsTrigger value=\"posted-jobs\">Posted Jobs</TabsTrigger>\n              <TabsTrigger value=\"applications\">Applications</TabsTrigger>\n              <TabsTrigger value=\"company-profile\">Company Profile</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"posted-jobs\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Posted Jobs</CardTitle>\n                  <CardDescription>Manage and track all the jobs you've posted</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {jobsLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                      <p className=\"mt-2 text-muted-foreground\">Loading your jobs...</p>\n                    </div>\n                  ) : jobs && jobs.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"px-4 py-3 text-left font-medium\">Job Title</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Type</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Location</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Posted</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Status</th>\n                            <th className=\"px-4 py-3 text-right font-medium\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {jobs.map(job => (\n                            <tr key={job.id} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"px-4 py-4\">{job.title}</td>\n                              <td className=\"px-4 py-4\">\n                                <Badge variant=\"outline\">{getJobTypeLabel(job.jobType)}</Badge>\n                              </td>\n                              <td className=\"px-4 py-4\">{job.location}</td>\n                              <td className=\"px-4 py-4\">\n                                {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                <Badge variant={job.isActive ? \"default\" : \"secondary\"}>\n                                  {job.isActive ? \"Active\" : \"Inactive\"}\n                                </Badge>\n                              </td>\n                              <td className=\"px-4 py-4 text-right\">\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\" \n                                    onClick={() => navigate(`/job/${job.id}`)}\n                                  >\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => navigate(`/edit-job/${job.id}`)}\n                                  >\n                                    <Edit className=\"h-4 w-4\" />\n                                  </Button>\n                                  <AlertDialog open={jobToDelete === job.id} onOpenChange={() => setJobToDelete(null)}>\n                                    <AlertDialogTrigger asChild>\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        className=\"text-red-500 hover:text-red-600\"\n                                        onClick={() => setJobToDelete(job.id)}\n                                      >\n                                        <Trash2 className=\"h-4 w-4\" />\n                                      </Button>\n                                    </AlertDialogTrigger>\n                                    <AlertDialogContent>\n                                      <AlertDialogHeader>\n                                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                                        <AlertDialogDescription>\n                                          This action cannot be undone. This will permanently delete the job posting\n                                          and remove all associated data.\n                                        </AlertDialogDescription>\n                                      </AlertDialogHeader>\n                                      <AlertDialogFooter>\n                                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                        <AlertDialogAction \n                                          className=\"bg-red-500 hover:bg-red-600\"\n                                          onClick={handleDeleteJob}\n                                        >\n                                          Delete\n                                        </AlertDialogAction>\n                                      </AlertDialogFooter>\n                                    </AlertDialogContent>\n                                  </AlertDialog>\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">No jobs posted yet</h3>\n                      <p className=\"text-muted-foreground mb-6\">\n                        You haven't posted any jobs yet. Create your first job posting now.\n                      </p>\n                      <Link href=\"/post-job\">\n                        <Button>\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Post a Job\n                        </Button>\n                      </Link>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"applications\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Applications</CardTitle>\n                  <CardDescription>Manage job applications from candidates</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {applicationsLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto\"></div>\n                      <p className=\"mt-2 text-muted-foreground\">Loading applications...</p>\n                    </div>\n                  ) : applications && applications.length > 0 ? (\n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full\">\n                        <thead>\n                          <tr className=\"border-b\">\n                            <th className=\"px-4 py-3 text-left font-medium\">Applicant</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Job</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Applied</th>\n                            <th className=\"px-4 py-3 text-left font-medium\">Status</th>\n                            <th className=\"px-4 py-3 text-right font-medium\">Actions</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {applications.map(app => (\n                            <tr key={app.id} className=\"border-b hover:bg-muted/50\">\n                              <td className=\"px-4 py-4\">Applicant ID: {app.userId}</td>\n                              <td className=\"px-4 py-4\">Job ID: {app.jobId}</td>\n                              <td className=\"px-4 py-4\">\n                                {formatDistanceToNow(new Date(app.submittedAt), { addSuffix: true })}\n                              </td>\n                              <td className=\"px-4 py-4\">\n                                {getStatusBadge(app.status)}\n                              </td>\n                              <td className=\"px-4 py-4 text-right\">\n                                <div className=\"flex justify-end gap-2\">\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"outline\"\n                                    onClick={() => navigate(`/application/${app.id}`)}\n                                  >\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                  {app.status === \"pending\" && (\n                                    <>\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        className=\"text-green-500 hover:text-green-600\"\n                                        onClick={() => updateApplicationStatus(app.id, \"approved\")}\n                                      >\n                                        <CheckCircle className=\"h-4 w-4\" />\n                                      </Button>\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        className=\"text-red-500 hover:text-red-600\"\n                                        onClick={() => updateApplicationStatus(app.id, \"rejected\")}\n                                      >\n                                        <XCircle className=\"h-4 w-4\" />\n                                      </Button>\n                                    </>\n                                  )}\n                                </div>\n                              </td>\n                            </tr>\n                          ))}\n                        </tbody>\n                      </table>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">No applications yet</h3>\n                      <p className=\"text-muted-foreground\">\n                        You haven't received any job applications yet.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"company-profile\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Company Profile</CardTitle>\n                  <CardDescription>Manage your company information</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"text-lg font-medium mb-2\">Company Information</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        This information will be displayed on your job postings and company profile.\n                      </p>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Company Name</label>\n                          <div className=\"p-2 bg-muted rounded-md\">{user?.name}</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Email</label>\n                          <div className=\"p-2 bg-muted rounded-md\">{user?.email}</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Username</label>\n                          <div className=\"p-2 bg-muted rounded-md\">{user?.username}</div>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium mb-1\">Role</label>\n                          <div className=\"p-2 bg-muted rounded-md capitalize\">{user?.role}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-6\">\n                        <Button>Edit Profile</Button>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18624},"client/src/pages/home-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { JobSearch, PopularSearches } from \"@/components/jobs/job-search\";\nimport { JobList } from \"@/components/jobs/job-list\";\nimport { CategoryList } from \"@/components/jobs/category-card\";\nimport { CompanyList } from \"@/components/companies/company-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Link } from \"wouter\";\nimport { Category, Company } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function HomePage() {\n  const { user, isJobSeeker, isCompany } = useAuth();\n\n  // Fetch categories\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch companies\n  const { data: companies, isLoading: companiesLoading } = useQuery<Company[]>({\n    queryKey: [\"/api/companies\"],\n  });\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow\">\n        {/* Hero Section */}\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-10 pb-14 md:pb-20\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl tracking-tight font-extrabold text-gray-900 dark:text-white sm:text-5xl md:text-6xl\">\n              <span className=\"block\">Find Your Dream Job</span>\n              <span className=\"block text-primary\">Start Your Journey Today</span>\n            </h1>\n            <p className=\"mt-3 max-w-md mx-auto text-base text-muted-foreground sm:text-lg md:mt-5 md:text-xl md:max-w-3xl\">\n              Discover thousands of job opportunities with top employers. Your next career move is just a click away.\n            </p>\n            \n            <div className=\"mt-8 md:mt-12 w-full max-w-3xl mx-auto\">\n              <JobSearch />\n              <PopularSearches />\n            </div>\n          </div>\n        </div>\n        \n        {/* Featured Jobs Section */}\n        <div className=\"bg-background\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <JobList limit={6} />\n          </div>\n        </div>\n        \n        {/* Categories Section */}\n        <div className=\"bg-gray-50 dark:bg-slate-900 py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-10\">\n              <h2 className=\"text-3xl font-extrabold text-gray-900 dark:text-white\">Popular Job Categories</h2>\n              <p className=\"mt-4 max-w-2xl text-xl text-muted-foreground mx-auto\">\n                Explore opportunities across different industries and find your perfect role\n              </p>\n            </div>\n            \n            {categoriesLoading ? (\n              <div className=\"text-center\">Loading categories...</div>\n            ) : categories ? (\n              <CategoryList categories={categories} />\n            ) : (\n              <div className=\"text-center text-muted-foreground\">No categories found</div>\n            )}\n          </div>\n        </div>\n        \n        {/* Featured Companies Section */}\n        <div className=\"bg-background py-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center mb-10\">\n              <h2 className=\"text-3xl font-extrabold text-gray-900 dark:text-white\">Featured Companies</h2>\n              <p className=\"mt-4 max-w-2xl text-xl text-muted-foreground mx-auto\">\n                Connect with top employers actively hiring on our platform\n              </p>\n            </div>\n            \n            {companiesLoading ? (\n              <div className=\"text-center\">Loading companies...</div>\n            ) : companies && companies.length > 0 ? (\n              <CompanyList companies={companies.slice(0, 6)} />\n            ) : (\n              <div className=\"text-center text-muted-foreground\">No companies found</div>\n            )}\n            \n            <div className=\"mt-10 text-center\">\n              <Link href=\"/companies\">\n                <Button size=\"lg\" variant=\"outline\">View All Companies</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n        \n        {/* Job Seeker CTA */}\n        {!user && (\n          <div className=\"bg-primary dark:bg-primary/80\">\n            <div className=\"max-w-7xl mx-auto px-4 py-16 sm:px-6 lg:px-8 lg:py-20 flex flex-col md:flex-row items-center justify-between\">\n              <div className=\"md:w-1/2 mb-10 md:mb-0\">\n                <h2 className=\"text-3xl font-extrabold text-white sm:text-4xl\">\n                  <span className=\"block\">Ready to take the next step?</span>\n                  <span className=\"block\">Create your profile today.</span>\n                </h2>\n                <p className=\"mt-4 text-lg leading-6 text-primary-100\">\n                  Join thousands of job seekers who have found their next opportunity through JobJet. Create your profile, upload your resume, and get matched with the perfect job.\n                </p>\n                <div className=\"mt-8 flex flex-col sm:flex-row gap-4\">\n                  <Link href=\"/auth\">\n                    <Button size=\"lg\" variant=\"default\" className=\"bg-white text-primary hover:bg-gray-100\">\n                      Create Profile\n                    </Button>\n                  </Link>\n                  <Link href=\"/jobs\">\n                    <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-primary\">\n                      Browse Jobs\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              <div className=\"md:w-1/2 flex justify-center\">\n                <svg\n                  className=\"h-56 w-auto sm:h-72 md:h-80 lg:h-96\"\n                  viewBox=\"0 0 786 786\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M393 0C175.923 0 0 175.923 0 393C0 610.077 175.923 786 393 786C610.077 786 786 610.077 786 393C786 175.923 610.077 0 393 0ZM393 714.545C215.495 714.545 71.4545 570.505 71.4545 393C71.4545 215.495 215.495 71.4545 393 71.4545C570.505 71.4545 714.545 215.495 714.545 393C714.545 570.505 570.505 714.545 393 714.545Z\"\n                    fill=\"white\"\n                    fillOpacity=\"0.1\"\n                  />\n                  <path\n                    d=\"M393 143C254.929 143 143 254.929 143 393C143 531.071 254.929 643 393 643C531.071 643 643 531.071 643 393C643 254.929 531.071 143 393 143ZM393 571.545C294.606 571.545 214.455 491.394 214.455 393C214.455 294.606 294.606 214.455 393 214.455C491.394 214.455 571.545 294.606 571.545 393C571.545 491.394 491.394 571.545 393 571.545Z\"\n                    fill=\"white\"\n                    fillOpacity=\"0.1\"\n                  />\n                  <circle cx=\"393\" cy=\"393\" r=\"107\" fill=\"white\" fillOpacity=\"0.1\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Employer CTA */}\n        {!isCompany && (\n          <div className=\"bg-gray-50 dark:bg-slate-900\">\n            <div className=\"max-w-7xl mx-auto px-4 py-12 sm:px-6 lg:px-8 lg:py-16\">\n              <div className=\"bg-background rounded-lg shadow-xl overflow-hidden\">\n                <div className=\"lg:grid lg:grid-cols-2 lg:gap-8\">\n                  <div className=\"px-6 py-10 lg:px-8 lg:py-12\">\n                    <h3 className=\"text-2xl font-extrabold text-gray-900 dark:text-white sm:text-3xl\">\n                      For Employers\n                    </h3>\n                    <p className=\"mt-4 text-lg text-muted-foreground\">\n                      Find the perfect candidates quickly and efficiently. Post jobs, screen applicants, and build your team with our powerful recruiting tools.\n                    </p>\n                    <div className=\"mt-8\">\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                        </div>\n                        <p className=\"ml-3 text-base text-gray-700 dark:text-gray-300\">\n                          Reach thousands of qualified candidates\n                        </p>\n                      </div>\n                      <div className=\"mt-6 flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                        </div>\n                        <p className=\"ml-3 text-base text-gray-700 dark:text-gray-300\">\n                          AI-powered matching technology\n                        </p>\n                      </div>\n                      <div className=\"mt-6 flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"h-6 w-6 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                        </div>\n                        <p className=\"ml-3 text-base text-gray-700 dark:text-gray-300\">\n                          Streamlined application management\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"mt-10\">\n                      <Link href={user ? \"/post-job\" : \"/auth\"}>\n                        <Button size=\"lg\">Post a Job</Button>\n                      </Link>\n                    </div>\n                  </div>\n                  <div className=\"relative h-64 lg:h-auto\">\n                    <svg\n                      className=\"absolute inset-0 h-full w-full object-cover\"\n                      viewBox=\"0 0 800 600\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                    >\n                      <rect width=\"800\" height=\"600\" fill=\"#6366F1\" />\n                      <path\n                        d=\"M400 50C150 50 50 250 50 400C50 550 150 550 400 550C650 550 750 400 750 250C750 100 650 50 400 50Z\"\n                        fill=\"#818CF8\"\n                      />\n                      <circle cx=\"400\" cy=\"300\" r=\"100\" fill=\"#A5B4FC\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10977},"client/src/pages/job-details.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Job } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { \n  Briefcase, \n  CalendarDays, \n  DollarSign, \n  MapPin, \n  LinkIcon,\n  Building,\n  ArrowLeft\n} from \"lucide-react\";\nimport { useJobStore } from \"@/store/job-store\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function JobDetails() {\n  const { id } = useParams();\n  const jobId = parseInt(id);\n  const [, navigate] = useLocation();\n  const { user, isJobSeeker } = useAuth();\n  const { setSelectedJob } = useJobStore();\n  const { toast } = useToast();\n\n  // Fetch job details\n  const { data: job, isLoading, error } = useQuery<Job>({\n    queryKey: [`/api/jobs/${jobId}`],\n  });\n\n  // Apply for job mutation\n  const handleApply = async () => {\n    if (!user) {\n      navigate(\"/auth\");\n      return;\n    }\n\n    try {\n      const applicationData = {\n        jobId,\n        userId: user.id,\n        resume: \"Uploaded resume\", // In a real app, this would be a file upload\n        coverLetter: \"Cover letter content\" // In a real app, this would be user input\n      };\n\n      await apiRequest(\"POST\", `/api/jobs/${jobId}/apply`, applicationData);\n      \n      toast({\n        title: \"Application submitted\",\n        description: \"Your application has been submitted successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Application failed\",\n        description: \"Failed to submit your application. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (job) {\n      setSelectedJob(job);\n    }\n    \n    return () => {\n      setSelectedJob(null);\n    };\n  }, [job, setSelectedJob]);\n\n  // Helper functions\n  const getJobTypeLabel = (type: string): string => {\n    const labels: Record<string, string> = {\n      full_time: \"Full-time\",\n      part_time: \"Part-time\",\n      contract: \"Contract\",\n      remote: \"Remote\",\n      internship: \"Internship\",\n    };\n    return labels[type] || type;\n  };\n\n  const getJobTypeColor = (type: string): string => {\n    const colors: Record<string, string> = {\n      full_time: \"bg-green-100 text-green-800 hover:bg-green-200\",\n      part_time: \"bg-blue-100 text-blue-800 hover:bg-blue-200\",\n      contract: \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\",\n      remote: \"bg-indigo-100 text-indigo-800 hover:bg-indigo-200\",\n      internship: \"bg-purple-100 text-purple-800 hover:bg-purple-200\",\n    };\n    return colors[type] || \"bg-gray-100 text-gray-800\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <main className=\"flex-grow flex items-center justify-center p-6\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\"></div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error || !job) {\n    return (\n      <div className=\"min-h-screen flex flex-col\">\n        <Navbar />\n        <main className=\"flex-grow p-6\">\n          <div className=\"max-w-4xl mx-auto bg-red-50 dark:bg-red-900/20 p-6 rounded-lg border border-red-200 dark:border-red-800 text-center\">\n            <h2 className=\"text-2xl font-bold text-red-700 dark:text-red-400 mb-2\">Job Not Found</h2>\n            <p className=\"text-red-600 dark:text-red-300 mb-4\">The job you're looking for doesn't exist or has been removed.</p>\n            <Button onClick={() => navigate(\"/jobs\")}>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Jobs\n            </Button>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow py-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Back Button */}\n          <button \n            onClick={() => navigate(\"/jobs\")}\n            className=\"flex items-center text-primary hover:text-primary/90 mb-6\"\n          >\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Jobs\n          </button>\n          \n          {/* Job Header */}\n          <div className=\"bg-background shadow rounded-lg p-6 mb-8\">\n            <div className=\"flex flex-col md:flex-row md:items-center justify-between\">\n              <div>\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"flex-shrink-0 h-16 w-16 bg-primary/10 rounded-md flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold text-primary\">\n                      {job.title.charAt(0)}\n                    </span>\n                  </div>\n                  <div>\n                    <Badge className={getJobTypeColor(job.jobType)}>\n                      {getJobTypeLabel(job.jobType)}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <h1 className=\"text-2xl md:text-3xl font-bold text-foreground mb-2\">{job.title}</h1>\n                <div className=\"flex flex-wrap items-center gap-x-4 gap-y-2 text-muted-foreground mb-4\">\n                  <div className=\"flex items-center text-sm\">\n                    <Building className=\"flex-shrink-0 mr-1.5 h-5 w-5\" />\n                    <span>Company {job.companyId}</span>\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <MapPin className=\"flex-shrink-0 mr-1.5 h-5 w-5\" />\n                    <span>{job.location}</span>\n                  </div>\n                  <div className=\"flex items-center text-sm\">\n                    <CalendarDays className=\"flex-shrink-0 mr-1.5 h-5 w-5\" />\n                    <span>Posted {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}</span>\n                  </div>\n                </div>\n              </div>\n              \n              {isJobSeeker && (\n                <div className=\"mt-4 md:mt-0\">\n                  <Button size=\"lg\" onClick={handleApply}>\n                    Apply Now\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-8\">\n              {/* Job Description */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold mb-4\">Job Description</h2>\n                  <div className=\"prose dark:prose-invert max-w-none\">\n                    <p className=\"whitespace-pre-line\">{job.description}</p>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Requirements */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-xl font-semibold mb-4\">Requirements</h2>\n                  <div className=\"prose dark:prose-invert max-w-none\">\n                    <p className=\"whitespace-pre-line\">{job.requirements}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Job Overview */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Job Overview</h2>\n                  <ul className=\"space-y-4\">\n                    {job.salary && (\n                      <li className=\"flex items-start\">\n                        <DollarSign className=\"h-5 w-5 text-primary mt-0.5 mr-3\" />\n                        <div>\n                          <span className=\"block text-sm font-medium\">Salary</span>\n                          <span className=\"block text-sm text-muted-foreground\">{job.salary}</span>\n                        </div>\n                      </li>\n                    )}\n                    \n                    <li className=\"flex items-start\">\n                      <Briefcase className=\"h-5 w-5 text-primary mt-0.5 mr-3\" />\n                      <div>\n                        <span className=\"block text-sm font-medium\">Job Type</span>\n                        <span className=\"block text-sm text-muted-foreground\">{getJobTypeLabel(job.jobType)}</span>\n                      </div>\n                    </li>\n                    \n                    <li className=\"flex items-start\">\n                      <MapPin className=\"h-5 w-5 text-primary mt-0.5 mr-3\" />\n                      <div>\n                        <span className=\"block text-sm font-medium\">Location</span>\n                        <span className=\"block text-sm text-muted-foreground\">{job.location}</span>\n                      </div>\n                    </li>\n                    \n                    {job.experience && (\n                      <li className=\"flex items-start\">\n                        <Briefcase className=\"h-5 w-5 text-primary mt-0.5 mr-3\" />\n                        <div>\n                          <span className=\"block text-sm font-medium\">Experience</span>\n                          <span className=\"block text-sm text-muted-foreground\">{job.experience}</span>\n                        </div>\n                      </li>\n                    )}\n                    \n                    <li className=\"flex items-start\">\n                      <CalendarDays className=\"h-5 w-5 text-primary mt-0.5 mr-3\" />\n                      <div>\n                        <span className=\"block text-sm font-medium\">Posted Date</span>\n                        <span className=\"block text-sm text-muted-foreground\">\n                          {new Date(job.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </li>\n                  </ul>\n                </CardContent>\n              </Card>\n              \n              {/* Skills */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Skills</h2>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Badge variant=\"outline\" className=\"bg-accent/50\">React</Badge>\n                    <Badge variant=\"outline\" className=\"bg-accent/50\">TypeScript</Badge>\n                    <Badge variant=\"outline\" className=\"bg-accent/50\">Node.js</Badge>\n                    <Badge variant=\"outline\" className=\"bg-accent/50\">MongoDB</Badge>\n                    <Badge variant=\"outline\" className=\"bg-accent/50\">Express</Badge>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              {/* Apply Button (Mobile) */}\n              {isJobSeeker && (\n                <div className=\"lg:hidden\">\n                  <Button className=\"w-full\" size=\"lg\" onClick={handleApply}>\n                    Apply Now\n                  </Button>\n                </div>\n              )}\n              \n              {/* Share Job */}\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h2 className=\"text-lg font-semibold mb-4\">Share This Job</h2>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"icon\" aria-label=\"Share on Twitter\">\n                      <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" />\n                      </svg>\n                    </Button>\n                    <Button variant=\"outline\" size=\"icon\" aria-label=\"Share on LinkedIn\">\n                      <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.223 0h.002z\" />\n                      </svg>\n                    </Button>\n                    <Button variant=\"outline\" size=\"icon\" aria-label=\"Share on Facebook\">\n                      <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path d=\"M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z\" />\n                      </svg>\n                    </Button>\n                    <Button variant=\"outline\" className=\"flex-1\" aria-label=\"Copy link\">\n                      <LinkIcon className=\"h-4 w-4 mr-2\" />\n                      Copy Link\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14103},"client/src/pages/job-listings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useSearch } from \"wouter\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { JobCard } from \"@/components/jobs/job-card\";\nimport { JobSearch } from \"@/components/jobs/job-search\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Job } from \"@shared/schema\";\nimport { useJobStore } from \"@/store/job-store\";\nimport { Filter, SlidersHorizontal } from \"lucide-react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\nexport default function JobListings() {\n  const [search] = useSearch();\n  const searchParams = new URLSearchParams(search);\n  const searchTerm = searchParams.get(\"search\") || \"\";\n  const locationTerm = searchParams.get(\"location\") || \"\";\n  const [isMobileFilterOpen, setIsMobileFilterOpen] = useState(false);\n  \n  // Initialize filters from the URL\n  const { setFilter, applyFilters, filters } = useJobStore();\n  const [sortBy, setSortBy] = useState(\"newest\");\n  \n  // Job type options\n  const jobTypes = [\n    { id: \"full_time\", label: \"Full Time\" },\n    { id: \"part_time\", label: \"Part Time\" },\n    { id: \"contract\", label: \"Contract\" },\n    { id: \"remote\", label: \"Remote\" },\n    { id: \"internship\", label: \"Internship\" },\n  ];\n  \n  // Set filters from URL params when component mounts\n  useEffect(() => {\n    if (searchTerm) {\n      setFilter(\"search\", searchTerm);\n    }\n    if (locationTerm) {\n      setFilter(\"location\", locationTerm);\n    }\n    \n    // Apply filters initially to update filtered jobs\n    applyFilters();\n  }, [searchTerm, locationTerm, setFilter, applyFilters]);\n  \n  // Fetch jobs with filters\n  const queryString = Object.entries(filters)\n    .filter(([_, value]) => value)\n    .map(([key, value]) => `${key}=${encodeURIComponent(value as string)}`)\n    .join(\"&\");\n  \n  const { data: jobs, isLoading } = useQuery<Job[]>({\n    queryKey: [`/api/jobs${queryString ? `?${queryString}` : \"\"}`],\n  });\n  \n  // Handle job type filter change\n  const handleJobTypeChange = (checked: boolean, type: string) => {\n    if (checked) {\n      setFilter(\"jobType\", type);\n    } else if (filters.jobType === type) {\n      setFilter(\"jobType\", \"\");\n    }\n    applyFilters();\n  };\n  \n  // Handle sort change\n  const handleSortChange = (value: string) => {\n    setSortBy(value);\n    // In a real app, you'd update the API call or sort the results\n  };\n  \n  // Sort the jobs based on selected sort option\n  const sortedJobs = jobs ? [...jobs].sort((a, b) => {\n    if (sortBy === \"newest\") {\n      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    } else if (sortBy === \"oldest\") {\n      return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n    }\n    return 0;\n  }) : [];\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow py-8\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Search Bar */}\n          <div className=\"mb-8\">\n            <JobSearch />\n          </div>\n          \n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Desktop Filters Sidebar */}\n            <div className=\"hidden lg:block w-64 flex-shrink-0\">\n              <div className=\"bg-background rounded-lg border p-6 sticky top-24\">\n                <h2 className=\"text-lg font-medium mb-4\">Filters</h2>\n                \n                <div className=\"space-y-6\">\n                  {/* Job Types */}\n                  <div>\n                    <h3 className=\"text-sm font-medium mb-3\">Job Type</h3>\n                    <div className=\"space-y-2\">\n                      {jobTypes.map((type) => (\n                        <div key={type.id} className=\"flex items-center\">\n                          <Checkbox \n                            id={`job-type-${type.id}`} \n                            checked={filters.jobType === type.id}\n                            onCheckedChange={(checked) => handleJobTypeChange(!!checked, type.id)}\n                          />\n                          <label \n                            htmlFor={`job-type-${type.id}`}\n                            className=\"ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                          >\n                            {type.label}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Experience Level */}\n                  <div>\n                    <h3 className=\"text-sm font-medium mb-3\">Experience Level</h3>\n                    <div className=\"space-y-2\">\n                      {[\"Entry Level\", \"Mid Level\", \"Senior Level\", \"Director\", \"Executive\"].map((level) => (\n                        <div key={level} className=\"flex items-center\">\n                          <Checkbox id={`exp-${level.toLowerCase().replace(/\\s+/g, '-')}`} />\n                          <label \n                            htmlFor={`exp-${level.toLowerCase().replace(/\\s+/g, '-')}`}\n                            className=\"ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                          >\n                            {level}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                  \n                  {/* Salary Range */}\n                  <div>\n                    <h3 className=\"text-sm font-medium mb-3\">Salary Range</h3>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <div>\n                        <Input placeholder=\"Min\" type=\"number\" />\n                      </div>\n                      <div>\n                        <Input placeholder=\"Max\" type=\"number\" />\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Clear Filters */}\n                  <Button variant=\"outline\" className=\"w-full\" onClick={applyFilters}>\n                    Apply Filters\n                  </Button>\n                </div>\n              </div>\n            </div>\n            \n            {/* Mobile Filters Button */}\n            <div className=\"lg:hidden mb-4\">\n              <Sheet open={isMobileFilterOpen} onOpenChange={setIsMobileFilterOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full flex items-center justify-center gap-2\">\n                    <Filter className=\"h-4 w-4\" />\n                    Filters\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\">\n                  <SheetHeader>\n                    <SheetTitle>Job Filters</SheetTitle>\n                    <SheetDescription>\n                      Filter jobs to find your perfect match\n                    </SheetDescription>\n                  </SheetHeader>\n                  \n                  <div className=\"py-4 space-y-6\">\n                    {/* Job Types */}\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-3\">Job Type</h3>\n                      <div className=\"space-y-2\">\n                        {jobTypes.map((type) => (\n                          <div key={type.id} className=\"flex items-center\">\n                            <Checkbox \n                              id={`mobile-job-type-${type.id}`} \n                              checked={filters.jobType === type.id}\n                              onCheckedChange={(checked) => handleJobTypeChange(!!checked, type.id)}\n                            />\n                            <label \n                              htmlFor={`mobile-job-type-${type.id}`}\n                              className=\"ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                            >\n                              {type.label}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Experience Level */}\n                    <div>\n                      <h3 className=\"text-sm font-medium mb-3\">Experience Level</h3>\n                      <div className=\"space-y-2\">\n                        {[\"Entry Level\", \"Mid Level\", \"Senior Level\", \"Director\", \"Executive\"].map((level) => (\n                          <div key={level} className=\"flex items-center\">\n                            <Checkbox id={`mobile-exp-${level.toLowerCase().replace(/\\s+/g, '-')}`} />\n                            <label \n                              htmlFor={`mobile-exp-${level.toLowerCase().replace(/\\s+/g, '-')}`}\n                              className=\"ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                            >\n                              {level}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Apply Button */}\n                    <Button \n                      className=\"w-full\" \n                      onClick={() => {\n                        applyFilters();\n                        setIsMobileFilterOpen(false);\n                      }}\n                    >\n                      Apply Filters\n                    </Button>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n            \n            {/* Job Listings */}\n            <div className=\"flex-1\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h1 className=\"text-2xl font-bold\">\n                  {searchTerm || locationTerm \n                    ? `Jobs ${searchTerm ? `for \"${searchTerm}\"` : \"\"} ${locationTerm ? `in ${locationTerm}` : \"\"}` \n                    : \"All Jobs\"}\n                </h1>\n                \n                <div className=\"flex items-center gap-2\">\n                  <label htmlFor=\"sort-by\" className=\"text-sm font-medium\">\n                    Sort by:\n                  </label>\n                  <Select value={sortBy} onValueChange={handleSortChange}>\n                    <SelectTrigger id=\"sort-by\" className=\"w-[130px]\">\n                      <SelectValue placeholder=\"Sort by\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"newest\">Newest</SelectItem>\n                      <SelectItem value=\"oldest\">Oldest</SelectItem>\n                      <SelectItem value=\"relevant\">Relevant</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              {isLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {[1, 2, 3, 4, 5, 6].map((i) => (\n                    <div key={i} className=\"h-[400px] bg-muted rounded-lg animate-pulse\"></div>\n                  ))}\n                </div>\n              ) : sortedJobs && sortedJobs.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {sortedJobs.map((job) => (\n                    <JobCard key={job.id} job={job} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-16 bg-muted/50 rounded-lg border\">\n                  <SlidersHorizontal className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h2 className=\"text-xl font-semibold mb-2\">No jobs found</h2>\n                  <p className=\"text-muted-foreground mb-6\">\n                    We couldn't find any jobs matching your criteria. Try adjusting your filters.\n                  </p>\n                  <Button variant=\"outline\" onClick={() => {\n                    setFilter(\"search\", \"\");\n                    setFilter(\"location\", \"\");\n                    setFilter(\"jobType\", \"\");\n                    applyFilters();\n                  }}>\n                    Clear All Filters\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12754},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/post-job.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertJobSchema, InsertJob } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\n// Enhanced job schema with custom validation\nconst jobFormSchema = insertJobSchema.extend({\n  title: z.string().min(3, \"Title must be at least 3 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  requirements: z.string().min(10, \"Requirements must be at least 10 characters\"),\n  location: z.string().min(2, \"Location is required\"),\n}).omit({ postedBy: true }); // Will be added in the submission handler\n\ntype JobFormData = z.infer<typeof jobFormSchema>;\n\nexport default function PostJob() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Fetch enum values (job types)\n  const { data: enums } = useQuery<{ jobTypes: string[] }>({\n    queryKey: [\"/api/enums\"],\n  });\n\n  // Fetch company info\n  const { data: company } = useQuery({\n    queryKey: [\"/api/companies/user\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/companies/user/${user?.id}`);\n      if (!res.ok) return null;\n      return res.json();\n    },\n    enabled: !!user,\n  });\n\n  const form = useForm<JobFormData>({\n    resolver: zodResolver(jobFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      requirements: \"\",\n      location: \"\",\n      salary: \"\",\n      jobType: \"full_time\",\n      experience: \"\",\n      companyId: 0,\n    },\n  });\n\n  // Update companyId when company data is loaded\n  useEffect(() => {\n    if (company) {\n      form.setValue(\"companyId\", company.id);\n    }\n  }, [company, form]);\n\n  const onSubmit = async (data: JobFormData) => {\n    try {\n      // Add the current user's ID as the poster\n      const fullJobData: InsertJob = {\n        ...data,\n        postedBy: user!.id,\n      };\n\n      await apiRequest(\"POST\", \"/api/jobs\", fullJobData);\n      \n      // Invalidate queries to refresh job listings\n      queryClient.invalidateQueries({ queryKey: [\"/api/jobs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/jobs\"] });\n      \n      toast({\n        title: \"Job posted successfully\",\n        description: \"Your job has been published and is now live.\",\n      });\n      \n      // Redirect to dashboard\n      navigate(\"/dashboard\");\n    } catch (error) {\n      toast({\n        title: \"Failed to post job\",\n        description: \"There was an error posting your job. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <Navbar />\n      \n      <main className=\"flex-grow py-10\">\n        <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold mb-6\">Post a New Job</h1>\n          \n          <Card>\n            <CardHeader>\n              <CardTitle>Job Details</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Job Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g. Senior Frontend Developer\" {...field} />\n                        </FormControl>\n                        <FormDescription>\n                          The title should clearly represent the position.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"jobType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Job Type</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select job type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {enums?.jobTypes?.map(type => (\n                                <SelectItem key={type} value={type}>\n                                  {type.split('_').map(word => \n                                    word.charAt(0).toUpperCase() + word.slice(1)\n                                  ).join(' ')}\n                                </SelectItem>\n                              )) || (\n                                <>\n                                  <SelectItem value=\"full_time\">Full Time</SelectItem>\n                                  <SelectItem value=\"part_time\">Part Time</SelectItem>\n                                  <SelectItem value=\"contract\">Contract</SelectItem>\n                                  <SelectItem value=\"remote\">Remote</SelectItem>\n                                  <SelectItem value=\"internship\">Internship</SelectItem>\n                                </>\n                              )}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g. San Francisco, CA or Remote\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"salary\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Salary Range (Optional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g. $80,000 - $100,000\" {...field} />\n                          </FormControl>\n                          <FormDescription>\n                            Including salary information increases applications.\n                          </FormDescription>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"experience\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Experience Required</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g. 3+ years\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Job Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe the role, responsibilities, and what a typical day looks like...\" \n                            className=\"min-h-[150px]\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Be specific about the role, team, and company culture.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"requirements\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Requirements</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"List the qualifications, skills, and experience required...\" \n                            className=\"min-h-[150px]\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormDescription>\n                          Include both required and preferred qualifications.\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex justify-end space-x-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => navigate(\"/dashboard\")}>\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" disabled={form.formState.isSubmitting}>\n                      {form.formState.isSubmitting ? \"Posting...\" : \"Post Job\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11063},"client/src/pages/resources.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLinkIcon } from \"lucide-react\";\nimport { Resource } from \"@shared/schema\";\n\nexport default function Resources() {\n  const { data: resources, isLoading } = useQuery<Resource[]>({\n    queryKey: [\"/api/resources\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">Loading resources...</div>\n      </div>\n    );\n  }\n\n  const groupedResources = resources?.reduce((acc, resource) => {\n    if (!acc[resource.category]) {\n      acc[resource.category] = [];\n    }\n    acc[resource.category].push(resource);\n    return acc;\n  }, {} as Record<string, Resource[]>) || {};\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Learning Resources</h1>\n        <p className=\"text-muted-foreground mt-2\">\n          Discover helpful resources to advance your career and skills\n        </p>\n      </div>\n\n      {Object.entries(groupedResources).map(([category, categoryResources]) => (\n        <div key={category} className=\"mb-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">{category}</h2>\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {categoryResources.map((resource) => (\n              <Card key={resource.id} className=\"h-full flex flex-col\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {resource.name}\n                  </CardTitle>\n                  <CardDescription>{resource.description}</CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex-1\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {resource.tags?.map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button asChild className=\"w-full\">\n                    <a\n                      href={resource.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center gap-2\"\n                    >\n                      Visit Resource\n                      <ExternalLinkIcon className=\"h-4 w-4\" />\n                    </a>\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}","size_bytes":2863},"client/src/store/job-store.ts":{"content":"import { create } from 'zustand';\nimport { Job } from '@shared/schema';\n\ninterface JobFilters {\n  search?: string;\n  location?: string;\n  jobType?: string;\n  category?: string;\n}\n\ninterface JobStore {\n  // Jobs state\n  jobs: Job[];\n  filteredJobs: Job[];\n  featuredJobs: Job[];\n  selectedJob: Job | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Filters\n  filters: JobFilters;\n  \n  // Actions\n  setJobs: (jobs: Job[]) => void;\n  setFeaturedJobs: (jobs: Job[]) => void;\n  setSelectedJob: (job: Job | null) => void;\n  setLoading: (isLoading: boolean) => void;\n  setError: (error: string | null) => void;\n  setFilter: (key: keyof JobFilters, value: string) => void;\n  clearFilters: () => void;\n  applyFilters: () => void;\n}\n\nexport const useJobStore = create<JobStore>((set, get) => ({\n  // Initial state\n  jobs: [],\n  filteredJobs: [],\n  featuredJobs: [],\n  selectedJob: null,\n  isLoading: false,\n  error: null,\n  \n  filters: {\n    search: '',\n    location: '',\n    jobType: '',\n    category: '',\n  },\n  \n  // Actions\n  setJobs: (jobs) => set(state => ({\n    jobs,\n    filteredJobs: jobs,\n  })),\n  \n  setFeaturedJobs: (featuredJobs) => set({ featuredJobs }),\n  \n  setSelectedJob: (selectedJob) => set({ selectedJob }),\n  \n  setLoading: (isLoading) => set({ isLoading }),\n  \n  setError: (error) => set({ error }),\n  \n  setFilter: (key, value) => set(state => ({\n    filters: {\n      ...state.filters,\n      [key]: value,\n    }\n  })),\n  \n  clearFilters: () => set(state => ({\n    filters: {\n      search: '',\n      location: '',\n      jobType: '',\n      category: '',\n    },\n    filteredJobs: state.jobs,\n  })),\n  \n  applyFilters: () => set(state => {\n    const { search, location, jobType, category } = state.filters;\n    \n    let filtered = [...state.jobs];\n    \n    if (search) {\n      const searchLower = search.toLowerCase();\n      filtered = filtered.filter(job => \n        job.title.toLowerCase().includes(searchLower) ||\n        job.description.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    if (location) {\n      const locationLower = location.toLowerCase();\n      filtered = filtered.filter(job => \n        job.location.toLowerCase().includes(locationLower)\n      );\n    }\n    \n    if (jobType) {\n      filtered = filtered.filter(job => job.jobType === jobType);\n    }\n    \n    if (category) {\n      // Filtering by category would be implemented here\n      // This depends on how we structure the category-job relationship\n    }\n    \n    return { filteredJobs: filtered };\n  }),\n}));\n","size_bytes":2516},"client/src/components/companies/company-card.tsx":{"content":"import { Company } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\ninterface CompanyCardProps {\n  company: Company;\n  jobCount?: number;\n}\n\nexport function CompanyCard({ company, jobCount = 0 }: CompanyCardProps) {\n  // Generate fallback for company logo if not available\n  const getFallbackInitial = () => {\n    return company.name.charAt(0).toUpperCase();\n  };\n\n  return (\n    <Link href={`/companies/${company.id}`}>\n      <div className=\"flex flex-col items-center p-4 bg-background border border-border rounded-lg hover:shadow-md transition-shadow duration-300 cursor-pointer\">\n        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-3\">\n          {company.logo ? (\n            <img \n              src={company.logo} \n              alt={company.name} \n              className=\"w-8 h-8 object-contain\"\n            />\n          ) : (\n            <span className=\"text-lg font-semibold text-primary\">\n              {getFallbackInitial()}\n            </span>\n          )}\n        </div>\n        <h3 className=\"text-sm font-medium text-foreground text-center\">{company.name}</h3>\n        <p className=\"text-xs text-muted-foreground mt-1\">{jobCount} jobs</p>\n      </div>\n    </Link>\n  );\n}\n\ninterface CompanyListProps {\n  companies: Company[];\n  jobCounts?: Record<number, number>;\n}\n\nexport function CompanyList({ companies, jobCounts = {} }: CompanyListProps) {\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n      {companies.map((company) => (\n        <CompanyCard \n          key={company.id} \n          company={company} \n          jobCount={jobCounts[company.id] || Math.floor(Math.random() * 50) + 5} \n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1734},"client/src/components/jobs/category-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Category } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { \n  Code2, Palette, TrendingUp, Users, BarChart, Headphones, DollarSign, Heart \n} from \"lucide-react\";\n\ninterface CategoryCardProps {\n  category: Category;\n  jobCount?: number;\n}\n\nexport function CategoryCard({ category, jobCount = 0 }: CategoryCardProps) {\n  // Map category icons to Lucide icons\n  const getIconComponent = (iconName: string) => {\n    const iconMap: Record<string, React.ReactNode> = {\n      \"CodeIcon\": <Code2 className=\"h-6 w-6 text-primary\" />,\n      \"PaletteIcon\": <Palette className=\"h-6 w-6 text-primary\" />,\n      \"TrendingUpIcon\": <TrendingUp className=\"h-6 w-6 text-primary\" />,\n      \"UsersIcon\": <Users className=\"h-6 w-6 text-primary\" />,\n      \"BarChartIcon\": <BarChart className=\"h-6 w-6 text-primary\" />,\n      \"HeadphonesIcon\": <Headphones className=\"h-6 w-6 text-primary\" />,\n      \"DollarSignIcon\": <DollarSign className=\"h-6 w-6 text-primary\" />,\n      \"HeartIcon\": <Heart className=\"h-6 w-6 text-primary\" />,\n    };\n    \n    return iconMap[iconName] || <Code2 className=\"h-6 w-6 text-primary\" />;\n  };\n\n  return (\n    <Link href={`/jobs?category=${encodeURIComponent(category.name)}`}>\n      <Card className=\"bg-background overflow-hidden shadow hover:shadow-md transition-shadow duration-300 text-center cursor-pointer\">\n        <CardContent className=\"p-6\">\n          <div className=\"h-12 w-12 bg-primary/10 rounded-md flex items-center justify-center mx-auto mb-4\">\n            {getIconComponent(category.icon)}\n          </div>\n          <h3 className=\"text-lg font-medium text-foreground\">{category.name}</h3>\n          <p className=\"mt-2 text-sm text-muted-foreground\">{jobCount} jobs</p>\n        </CardContent>\n      </Card>\n    </Link>\n  );\n}\n\ninterface CategoryListProps {\n  categories: Category[];\n  jobCounts?: Record<number, number>;\n}\n\nexport function CategoryList({ categories, jobCounts = {} }: CategoryListProps) {\n  return (\n    <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6\">\n      {categories.map((category) => (\n        <CategoryCard \n          key={category.id} \n          category={category} \n          jobCount={jobCounts[category.id] || Math.floor(Math.random() * 1000) + 100} \n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":2351},"client/src/components/jobs/job-card.tsx":{"content":"import { Card, CardContent, CardFooter } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { CalendarDays, Briefcase, MapPin, DollarSign } from \"lucide-react\";\nimport { Job } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface JobCardProps {\n  job: Job;\n}\n\nexport function JobCard({ job }: JobCardProps) {\n  const jobTypeColors: Record<string, string> = {\n    full_time: \"bg-green-100 text-green-800 hover:bg-green-200\",\n    part_time: \"bg-blue-100 text-blue-800 hover:bg-blue-200\",\n    contract: \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\",\n    remote: \"bg-indigo-100 text-indigo-800 hover:bg-indigo-200\",\n    internship: \"bg-purple-100 text-purple-800 hover:bg-purple-200\",\n  };\n\n  const getJobTypeLabel = (type: string): string => {\n    const labels: Record<string, string> = {\n      full_time: \"Full-time\",\n      part_time: \"Part-time\",\n      contract: \"Contract\",\n      remote: \"Remote\",\n      internship: \"Internship\",\n    };\n    return labels[type] || type;\n  };\n\n  return (\n    <Card className=\"job-card overflow-hidden shadow hover:shadow-lg transition-all duration-300 flex flex-col h-full\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex-shrink-0 h-12 w-12 bg-primary/10 rounded-md flex items-center justify-center\">\n            <span className=\"text-lg font-bold text-primary\">\n              {job.title.charAt(0)}\n            </span>\n          </div>\n          <div>\n            <Badge className={jobTypeColors[job.jobType] || \"bg-gray-100 text-gray-800\"}>\n              {getJobTypeLabel(job.jobType)}\n            </Badge>\n          </div>\n        </div>\n        <h3 className=\"text-lg font-medium text-foreground mb-1\">{job.title}</h3>\n        <div className=\"text-sm text-muted-foreground mb-3\">\n          {job.companyId} · {job.location}\n        </div>\n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <Briefcase className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-muted-foreground\" />\n            {job.experience}\n          </div>\n          <div className=\"flex items-center text-sm text-muted-foreground\">\n            <CalendarDays className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-muted-foreground\" />\n            Posted {formatDistanceToNow(new Date(job.createdAt), { addSuffix: true })}\n          </div>\n          {job.salary && (\n            <div className=\"flex items-center text-sm text-primary font-medium\">\n              <DollarSign className=\"flex-shrink-0 mr-1.5 h-5 w-5 text-primary\" />\n              {job.salary}\n            </div>\n          )}\n        </div>\n        <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n          {job.description}\n        </p>\n        <div className=\"flex flex-wrap gap-2 mt-2\">\n          {/* Tags would go here */}\n          <Badge variant=\"outline\" className=\"bg-accent/50\">React</Badge>\n          <Badge variant=\"outline\" className=\"bg-accent/50\">TypeScript</Badge>\n          <Badge variant=\"outline\" className=\"bg-accent/50\">Node.js</Badge>\n        </div>\n      </CardContent>\n      <CardFooter className=\"mt-auto pt-4 border-t bg-muted/50 px-6 py-3\">\n        <Link href={`/job/${job.id}`}>\n          <Button variant=\"outline\" className=\"w-full border-primary text-primary hover:bg-primary/10\">\n            View Details\n          </Button>\n        </Link>\n      </CardFooter>\n    </Card>\n  );\n}\n","size_bytes":3579},"client/src/components/jobs/job-list.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { JobCard } from \"@/components/jobs/job-card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Job } from \"@shared/schema\";\nimport { useJobStore } from \"@/store/job-store\";\nimport { useEffect } from \"react\";\n\ninterface JobListProps {\n  title?: string;\n  showViewAll?: boolean;\n  limit?: number;\n  filterParams?: Record<string, string>;\n}\n\nexport function JobList({\n  title = \"Featured Jobs\",\n  showViewAll = true,\n  limit,\n  filterParams = {},\n}: JobListProps) {\n  // Construct query string from filter params\n  const queryString = Object.entries(filterParams)\n    .filter(([_, value]) => value)\n    .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n    .join(\"&\");\n\n  const { setJobs, setFeaturedJobs } = useJobStore();\n\n  const { data: jobs, isLoading, error } = useQuery<Job[]>({\n    queryKey: [`/api/jobs${queryString ? `?${queryString}` : \"\"}`],\n  });\n\n  // Update the job store when jobs are fetched\n  useEffect(() => {\n    if (jobs) {\n      setJobs(jobs);\n      setFeaturedJobs(jobs.slice(0, 6)); // First 6 jobs as featured\n    }\n  }, [jobs, setJobs, setFeaturedJobs]);\n\n  // Generate skeletons for loading state\n  const renderSkeletons = () => {\n    return Array(limit || 3)\n      .fill(0)\n      .map((_, index) => (\n        <div key={index} className=\"flex flex-col space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <Skeleton className=\"h-12 w-12 rounded-md\" />\n            <Skeleton className=\"h-6 w-24 rounded-full\" />\n          </div>\n          <Skeleton className=\"h-6 w-3/4\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-full\" />\n            <Skeleton className=\"h-4 w-1/3\" />\n          </div>\n          <div className=\"flex gap-2\">\n            <Skeleton className=\"h-6 w-16 rounded-full\" />\n            <Skeleton className=\"h-6 w-16 rounded-full\" />\n            <Skeleton className=\"h-6 w-16 rounded-full\" />\n          </div>\n          <Skeleton className=\"h-10 w-full mt-4\" />\n        </div>\n      ));\n  };\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-destructive\">Error loading jobs. Please try again later.</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-12\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n        {showViewAll && (\n          <a href=\"/jobs\" className=\"text-primary hover:text-primary/90 font-medium\">\n            View all jobs →\n          </a>\n        )}\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          renderSkeletons()\n        ) : jobs && jobs.length > 0 ? (\n          jobs.slice(0, limit).map((job) => <JobCard key={job.id} job={job} />)\n        ) : (\n          <div className=\"col-span-full text-center py-8\">\n            <p className=\"text-muted-foreground\">No jobs found matching your criteria.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3170},"client/src/components/jobs/job-search.tsx":{"content":"import { useState, FormEvent } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, MapPin } from \"lucide-react\";\nimport { useJobStore } from \"@/store/job-store\";\n\nexport function JobSearch() {\n  const { filters, setFilter } = useJobStore();\n  const [searchTerm, setSearchTerm] = useState(filters.search || \"\");\n  const [location, setLocation] = useState(filters.location || \"\");\n  const [, navigate] = useLocation();\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    // Update filters in the store\n    setFilter(\"search\", searchTerm);\n    setFilter(\"location\", location);\n    \n    // Navigate to jobs page with query params\n    const queryParams = new URLSearchParams();\n    if (searchTerm) queryParams.set(\"search\", searchTerm);\n    if (location) queryParams.set(\"location\", location);\n    \n    navigate(`/jobs?${queryParams.toString()}`);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"flex flex-col md:flex-row gap-4 w-full max-w-3xl mx-auto\">\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"relative rounded-md shadow-sm\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <Search className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n          <Input \n            type=\"text\" \n            placeholder=\"Job title, keywords, or company\" \n            className=\"pl-10 py-6\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n          />\n        </div>\n      </div>\n      \n      <div className=\"flex-1 min-w-0\">\n        <div className=\"relative rounded-md shadow-sm\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <MapPin className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n          <Input \n            type=\"text\" \n            placeholder=\"City, state, or remote\" \n            className=\"pl-10 py-6\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n          />\n        </div>\n      </div>\n      \n      <Button type=\"submit\" size=\"lg\" className=\"px-8\">\n        Search\n      </Button>\n    </form>\n  );\n}\n\nexport function PopularSearches() {\n  const [, navigate] = useLocation();\n  const { setFilter } = useJobStore();\n  \n  const handleSearchClick = (term: string) => {\n    setFilter(\"search\", term);\n    navigate(`/jobs?search=${encodeURIComponent(term)}`);\n  };\n\n  return (\n    <div className=\"mt-4 text-sm text-muted-foreground flex justify-center flex-wrap gap-x-6 gap-y-2\">\n      <span>Popular: </span>\n      <button \n        onClick={() => handleSearchClick(\"Remote\")}\n        className=\"text-primary hover:text-primary/90\"\n      >\n        Remote\n      </button>\n      <button \n        onClick={() => handleSearchClick(\"Software Engineer\")}\n        className=\"text-primary hover:text-primary/90\"\n      >\n        Software Engineer\n      </button>\n      <button \n        onClick={() => handleSearchClick(\"Data Scientist\")}\n        className=\"text-primary hover:text-primary/90\"\n      >\n        Data Scientist\n      </button>\n      <button \n        onClick={() => handleSearchClick(\"Marketing\")}\n        className=\"text-primary hover:text-primary/90\"\n      >\n        Marketing\n      </button>\n    </div>\n  );\n}","size_bytes":3403},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Facebook, Instagram, Twitter, Linkedin, Github } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-slate-900 text-slate-200\">\n      <div className=\"max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-400 tracking-wider uppercase\">For Job Seekers</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Browse Jobs</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/auth\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Create Profile</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Job Alerts</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/resources\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Career Resources</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-400 tracking-wider uppercase\">For Employers</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li>\n                <Link href=\"/post-job\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Post a Job</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/pricing\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Pricing</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/resources\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Recruiting Solutions</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/companies\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Company Profiles</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-400 tracking-wider uppercase\">Company</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li>\n                <Link href=\"/about\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">About Us</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Blog</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/press\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Press</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Contact Us</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-400 tracking-wider uppercase\">Legal</h3>\n            <ul className=\"mt-4 space-y-4\">\n              <li>\n                <Link href=\"/privacy\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Privacy Policy</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Terms of Service</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/cookies\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Cookie Policy</a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/accessibility\">\n                  <a className=\"text-base text-slate-300 hover:text-white\">Accessibility</a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div className=\"mt-12 border-t border-slate-700 pt-8 flex flex-col md:flex-row items-center justify-between\">\n          <div className=\"flex space-x-6 md:order-2\">\n            <a href=\"#\" className=\"text-slate-400 hover:text-slate-300\">\n              <span className=\"sr-only\">Facebook</span>\n              <Facebook className=\"h-6 w-6\" />\n            </a>\n            <a href=\"#\" className=\"text-slate-400 hover:text-slate-300\">\n              <span className=\"sr-only\">Instagram</span>\n              <Instagram className=\"h-6 w-6\" />\n            </a>\n            <a href=\"#\" className=\"text-slate-400 hover:text-slate-300\">\n              <span className=\"sr-only\">Twitter</span>\n              <Twitter className=\"h-6 w-6\" />\n            </a>\n            <a href=\"#\" className=\"text-slate-400 hover:text-slate-300\">\n              <span className=\"sr-only\">LinkedIn</span>\n              <Linkedin className=\"h-6 w-6\" />\n            </a>\n            <a href=\"#\" className=\"text-slate-400 hover:text-slate-300\">\n              <span className=\"sr-only\">GitHub</span>\n              <Github className=\"h-6 w-6\" />\n            </a>\n          </div>\n          <div className=\"mt-8 md:mt-0 md:order-1\">\n            <p className=\"text-center text-base text-slate-400\">\n              &copy; {new Date().getFullYear()} JobJet, Inc. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5672},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Moon, Sun, Menu } from \"lucide-react\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useState } from \"react\";\n\nexport function Navbar() {\n  const { theme, setTheme } = useTheme();\n  const { user, logoutMutation, isCompany } = useAuth();\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const closeMobileMenu = () => {\n    setMobileMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"bg-background sticky top-0 z-50 border-b\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0 flex items-center\">\n              <Link href=\"/\">\n                <span className=\"text-primary text-2xl font-bold cursor-pointer\">JobJet</span>\n              </Link>\n            </div>\n            <div className=\"hidden sm:ml-6 sm:flex sm:space-x-8\">\n              <Link href=\"/\">\n                <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer ${\n                  location === \"/\" \n                    ? \"border-primary text-foreground\" \n                    : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border\"\n                }`}>\n                  Find Jobs\n                </span>\n              </Link>\n              <Link href=\"/companies\">\n                <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer ${\n                  location === \"/companies\" \n                    ? \"border-primary text-foreground\" \n                    : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border\"\n                }`}>\n                  Companies\n                </span>\n              </Link>\n              <Link href=\"/resources\">\n                <span className={`inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium cursor-pointer ${\n                  location === \"/resources\" \n                    ? \"border-primary text-foreground\" \n                    : \"border-transparent text-muted-foreground hover:text-foreground hover:border-border\"\n                }`}>\n                  Resources\n                </span>\n              </Link>\n            </div>\n          </div>\n          <div className=\"hidden sm:ml-6 sm:flex sm:items-center sm:space-x-4\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n              aria-label=\"Toggle theme\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            {user ? (\n              <>\n                {isCompany && (\n                  <Link href=\"/post-job\">\n                    <Button className=\"bg-primary hover:bg-primary/90\">Post a Job</Button>\n                  </Link>\n                )}\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Avatar className=\"h-8 w-8 cursor-pointer\">\n                      <AvatarImage src=\"\" alt={user.name} />\n                      <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                        {user.name.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem>\n                      <Link href=\"/profile\">Profile</Link>\n                    </DropdownMenuItem>\n                    {isCompany && (\n                      <DropdownMenuItem>\n                        <Link href=\"/dashboard\">Dashboard</Link>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem>\n                      <Link href=\"/applications\">Applications</Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleLogout}>\n                      Sign out\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <>\n                <Link href=\"/auth\">\n                  <Button variant=\"ghost\">Sign In</Button>\n                </Link>\n                <Link href=\"/auth\">\n                  <Button>Sign Up</Button>\n                </Link>\n              </>\n            )}\n          </div>\n          \n          {/* Mobile menu button */}\n          <div className=\"flex items-center sm:hidden\">\n            <Button \n              variant=\"ghost\" \n              size=\"icon\"\n              onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n              aria-label=\"Toggle theme\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-5 w-5\" /> : <Moon className=\"h-5 w-5\" />}\n            </Button>\n            \n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"ml-2\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\">\n                <div className=\"py-4 space-y-4\">\n                  <Link href=\"/\" onClick={closeMobileMenu}>\n                    <span className={`block py-2 px-4 text-base font-medium rounded-md cursor-pointer ${\n                      location === \"/\" \n                        ? \"bg-primary/10 text-primary\" \n                        : \"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                    }`}>\n                      Find Jobs\n                    </span>\n                  </Link>\n                  <Link href=\"/companies\" onClick={closeMobileMenu}>\n                    <span className={`block py-2 px-4 text-base font-medium rounded-md cursor-pointer ${\n                      location === \"/companies\" \n                        ? \"bg-primary/10 text-primary\" \n                        : \"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                    }`}>\n                      Companies\n                    </span>\n                  </Link>\n                  <Link href=\"/resources\" onClick={closeMobileMenu}>\n                    <span className={`block py-2 px-4 text-base font-medium rounded-md cursor-pointer ${\n                      location === \"/resources\" \n                        ? \"bg-primary/10 text-primary\" \n                        : \"text-foreground hover:bg-accent hover:text-accent-foreground\"\n                    }`}>\n                      Resources\n                    </span>\n                  </Link>\n                  \n                  {user ? (\n                    <>\n                      <div className=\"border-t border-border pt-4\">\n                        <div className=\"flex items-center px-4\">\n                          <div className=\"flex-shrink-0\">\n                            <Avatar>\n                              <AvatarImage src=\"\" alt={user.name} />\n                              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                                {user.name.charAt(0).toUpperCase()}\n                              </AvatarFallback>\n                            </Avatar>\n                          </div>\n                          <div className=\"ml-3\">\n                            <div className=\"text-base font-medium\">{user.name}</div>\n                            <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                          </div>\n                        </div>\n                        <div className=\"mt-3 space-y-1\">\n                          <Link href=\"/profile\" onClick={closeMobileMenu}>\n                            <span className=\"block py-2 px-4 text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground rounded-md cursor-pointer\">\n                              Profile\n                            </span>\n                          </Link>\n                          {isCompany && (\n                            <Link href=\"/dashboard\" onClick={closeMobileMenu}>\n                              <span className=\"block py-2 px-4 text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground rounded-md cursor-pointer\">\n                                Dashboard\n                              </span>\n                            </Link>\n                          )}\n                          {isCompany && (\n                            <Link href=\"/post-job\" onClick={closeMobileMenu}>\n                              <span className=\"block py-2 px-4 text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground rounded-md cursor-pointer\">\n                                Post a Job\n                              </span>\n                            </Link>\n                          )}\n                          <Link href=\"/applications\" onClick={closeMobileMenu}>\n                            <span className=\"block py-2 px-4 text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground rounded-md cursor-pointer\">\n                              Applications\n                            </span>\n                          </Link>\n                          <a \n                            className=\"block py-2 px-4 text-base font-medium text-foreground hover:bg-accent hover:text-accent-foreground rounded-md cursor-pointer\"\n                            onClick={() => {\n                              handleLogout();\n                              closeMobileMenu();\n                            }}\n                          >\n                            Sign out\n                          </a>\n                        </div>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"border-t border-border pt-4 px-4 flex flex-col space-y-3\">\n                      <Link href=\"/auth\" onClick={closeMobileMenu}>\n                        <Button className=\"w-full justify-center\" variant=\"outline\">Sign In</Button>\n                      </Link>\n                      <Link href=\"/auth\" onClick={closeMobileMenu}>\n                        <Button className=\"w-full justify-center\">Sign Up</Button>\n                      </Link>\n                    </div>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":11317},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"SETUP.md":{"content":"# JobJet - Quick Setup Guide\n\n## Prerequisites\n- Node.js 18+\n- npm 8+\n\n## Installation\n```bash\n# 1. Extract/clone the project\ncd jobjet\n\n# 2. Install dependencies\nnpm install\n\n# 3. Start the development server\nnpm run dev\n```\n\n## Access the Application\nOpen: http://localhost:5000\n\n## Alternative Run Command\nIf `npm run dev` has issues:\n```bash\nnode -r tsx/esm server/index.ts\n```\n\n## Key Features\n- ✅ Built-in authentication (no external services)\n- ✅ In-memory storage (no database setup required)\n- ✅ Sample companies and resources pre-loaded\n- ✅ Purple theme throughout\n- ✅ Mobile responsive design\n\n## Test Users\nRegister new accounts:\n- **Job Seeker**: Choose \"Find a job\" \n- **Company**: Choose \"Hire talent\"\n\n## No Configuration Required\n- No API keys needed\n- No database setup\n- No external services\n- No environment variables required\n\nReady to run out of the box!","size_bytes":886}}}